/**
 * @author     LiuZhaoHui <hi.liuzhaoxin@gmail.com>
 * @link       http://www.eatbean.com/nodejs
**/

"use strict";

var fs = require("fs");
var path = require("path");
var cluster = require("cluster");

function Dew (cmd)
{
    if (!Command.has(cmd))
    {
        throw new Error("\"" + cmd + "\" command does not exist");
    }
    
    var args = Array.prototype.slice.call(arguments, 1);
    return Command.execute(cmd, args);
}

Dew.varsion = "1.0.0";
Dew.server = "Node.js/" + process.version;
Dew.nodejs = Dew.server + " Dew/" + Dew.varsion;
Dew.isMaster = cluster.isMaster;

var Use = 
{
    __name__ : "Use", 
    _namespace : {}, 
    _loaded : {}, 
    _path : path.normalize(__dirname + "/lib"), 
    _invalidCharsRegex : new RegExp("[^\\w\\.-]"), 
    
    handle : function (ns, options)
    {
        if ("string" !== typeof ns)
        {
            throw new Error("ns argument must be a string");
        }
        
        if (this._invalidCharsRegex.test(ns))
        {
            throw new Error("Illegal character in \"" + ns + "\"");
        }
        
        if (this._loaded[ns])
        {
            return this.instance(this._loaded[ns], options);
        }
        
        var mark = ".", offset = ns.indexOf(mark), index = 0;
        var ref = this._namespace, fp = this._path, s;
        
        while (~offset)
        {
            s = ns.slice(index, offset);
            
            if (!(s in ref))
            {
                fp = path.normalize(fp + "/" + s);
                
                if (!fs.existsSync(fp) || !fs.statSync(fp).isDirectory())
                {
                    throw new Error("Directory \"" + fp + "\" does not exist");
                }
                
                ref[s] = {};
            }
            else
            {
                fp += "/" + s;
            }
            
            ref = ref[s];
            
            index = offset + 1;
            offset = ns.indexOf(mark, index);
        }
        
        s = ns.slice(index) + ".js";
        
        if (s in ref)
        {
            return ref[s];
        }
        
        fp = path.normalize(fp + "/" + s); 
        
        if (!fs.existsSync(fp) || !fs.statSync(fp).isFile())
        {
            throw new Error("File \"" + fp + "\" does not exist");
        }
        
        ref[s] = require(fp);
        
        this._loaded[ns] = ref[s];
        
        return this.instance(ref[s], options);
    }, 
    
    instance : function (data, options)
    {
        if (!options || "object" !== typeof options || options.instance !== true)
        {
            return data;
        }
        
        if ("function" === typeof data)
        {
            if (Array.isArray(options.args))
            {
                var newObj = {__proto__ : data.prototype};
                data.apply(newObj, options.args);
                
                return newObj;
            }
            else
            {
                return new data();
            }
        }
        else if (data && "object" === typeof data)
        {
            if (Array.isArray(options.args) && "function" === typeof data.initialize)
            {
                var newObj = Object.create(data);
                newObj.initialize.apply(newObj, options.args);
                
                return newObj;
            }
            else
            {
                return Object.create(data);
            }
        }
        
        return data;
    }
};

var Command = 
{
    __name__ : "Command", 
    
    _cmd : 
    {
        use : Use
    }, 
    
    has : function (cmd)
    {
        return cmd in this._cmd;
    }, 
    
    execute : function (cmd, args)
    {
        var c = this._cmd[cmd];
        return c.handle.apply(c, args);
    }
};

global.Dew = Dew;
module.exports = Dew;