/**
 * @author     LiuZhaoHui <hi.liuzhaoxin@gmail.com>
 * @link       http://www.eatbean.com/nodejs
**/

"use strict";

module.exports = Query;

var Pools = Dew("use", "Common.Pools");
var Parser = Dew("use", "DataBase.Memcached.Parser");

var Query = 
{
    __name__ : "Query", 
    
    _nowPools : 0, 
    
    initialize : function (application)
    {
        application.useSection("memcached");
        
        this._maxPools = application.get("max_pools");
    }, 
    
    // 返回一个 Query 实例
    getInstance : function (connect)
    {
        var self = Object.create(this);
        self._queue = [];
        self._pools = new Pools();
        self._connect = connect;
        
        return self;
    }, 
    
    addQuery : function (cmd, callback)
    {
        this._queue.push({type : 0, command : cmd, callback : callback});
        this.execute();
    }, 
    
    execute : function ()
    {
        var pools = this._pools;
        var obj = pools.borrowObject();
        
        if (obj === null)
        {
            if (this._nowPools === this._maxPools) return;
            this._nowPools++;
            
            obj = 
            {
                socket : this._connect.create(), 
                pools : this._pools, 
                query : this, 
                isPersistent : false, 
                isFinish : true
            };
            obj.parser = Parser.getInstance(obj);
            
            pools.addObject(obj);
            obj = pools.borrowObject();
            
            obj.socket.on("data", obj.parser.handle.bind(obj.parser));
        }
        
        var item = this._queue.shift();
        
        if (item === undefined)
        {
            return pools.returnObject(obj);
        }
        
        if (item.type === 0)
        {
            obj.parser.onfinish = item.callback;
            obj.socket.write(item.command);
        }
        else
        {
            obj.isPersistent = true;
            obj.query = item.persistentQuery;
            item.persistentQuery._object = obj;
            item.persistentQuery.execute();
        }
    }
};

module.exports = Query;