/**
 * @author     LiuZhaoHui <hi.liuzhaoxin@gmail.com>
 * @link       http://www.eatbean.com/nodejs
**/

"use strict";

var Parser = 
{
    __name__ : "Parser", 
    
    _cmd : "", 
    _cas : -1, 
    _value : "", 
    _valueLength : 0, 
    
    _mark : 0, 
    _state : 0, 
    STATE : 
    {
        START : 0, 
        ANALYZE : 1, 
        
        VALUE_START : 2, 
        VALUE : 3, 
        VALUE_FILED_START : 4, 
        VALUE_FILED : 5, 
        VALUE_DATA_START : 6, 
        VALUE_DATA : 7, 
        
        STAT_START : 8, 
        STAT : 9, 
        STAT_FILED_START : 10, 
        STAT_FILED : 11, 
        
        VERSION_START : 12, 
        VERSION : 13, 
        
        ERROR_INFO_START : 14, 
        ERROR_INFO : 15, 
        
        ERROR_START : 16, 
        ERROR : 17, 
        
        END : 18
    }, 
    
    // 返回一个 Parser 实例
    getInstance : function (obj)
    {
        var self = Object.create(this);
        self._object = obj;
        
        return self;
    }, 
    
    handle : function (chunk)
    {
        var S = this.STATE;
        var i = 0, len = chunk.length;
        var c, index = i;
        
        for (; i < len; i++)
        {
            c = chunk[i];
            
            switch (this._state)
            {
                case S.START : 
                  this._cmd = "";
                  this._state = S.ANALYZE;
                  
                case S.ANALYZE : 
                  // space, \r
                  if (c !== 0x20 && c !== 0x0D)
                  {
                      break;
                  }
                  
                  this._cmd += chunk.toString("utf8", index, i);
                  
                  switch (this._cmd)
                  {
                      case "VALUE" : 
                        this._result = {};
                        this._state = S.VALUE_FILED_START;
                        break;
                        
                      case "STORED" : 
                      case "DELETED" : 
                      case "END" : 
                      case "OK" : 
                      case "TOUCHED" : 
                        this._state = S.END;
                        break;
                        
                      case "STAT" : 
                        this._result = {};
                        this._state = S.STAT_FILED_START;
                        break;
                        
                      case "VERSION" : 
                        this._state = S.VERSION_START;
                        break;
                        
                      case "NOT_STORED" : 
                        this._text = "indicate the data was not stored, but not because of an error.";
                        this._state = S.ERROR;
                        break;
                        
                      case "EXISTS" : 
                        this._text = "indicate that the item you are trying to store with a \"cas\" command has been modified since you last fetched it.";
                        this._state = S.ERROR;
                        break;
                        
                      case "NOT_FOUND" : 
                        this._text = "indicate that the item with this key was not found.";
                        this._state = S.ERROR;
                        break;
                        
                      case "ERROR" : 
                        this._text = "means the client sent a nonexistent command name.";
                        this._state = S.ERROR;
                        break;
                        
                      case "CLIENT_ERROR" : 
                      case "SERVER_ERROR" : 
                        this._state = S.ERROR_INFO_START;
                        break;
                        
                      default : 
                        if (isNaN(this._cmd))
                        {
                            this._result = this._cmd;
                            this._state = S.END;
                        }
                        else
                        {
                            this._state = S.ERROR_START;
                        }
                  }
                  
                  break;
                  
                case S.VALUE_START : 
                  // \n
                  if (c === 0x0A)
                  {
                      break;
                  }
                  
                  index = i;
                  this._cmd = "";
                  this._key = "";
                  this._bytes = 0;
                  this._value = "";
                  this._valueLength = 0;
                  this._mark = 0;
                  this._field = "";
                  this._state = S.VALUE;
                  break;
                  
                case S.VALUE : 
                  // space, \r
                  if (c !== 0x20 && c !== 0x0D)
                  {
                      break;
                  }
                  
                  this._cmd += chunk.toString("utf8", index, i);
                  
                  switch (this._cmd)
                  {
                      case "VALUE" : 
                        this._state = S.VALUE_FILED_START;
                        break;
                        
                      case "END" : 
                        this._state = S.END;
                        break;
                        
                      default : 
                        this._state = S.ERROR_START;
                  }
                  
                  break;
                  
                case S.VALUE_FILED_START : 
                  index = i;
                  this._field = "";
                  this._state = S.VALUE_FILED;
                  
                case S.VALUE_FILED : 
                  // \r
                  if (c === 0x0D)
                  {
                      this._state = S.VALUE_DATA_START;
                  }
                  // space
                  else if (c === 0x20)
                  {
                      this._state = S.VALUE_FILED_START;
                  }
                  else
                  {
                      break;
                  }
                  
                  // VALUE <key> <flags> <bytes> [<cas unique>]\r\n
                  this._field += chunk.toString("utf8", index, i);
                  
                  // <key>
                  if (this._mark === 0)
                  {
                      this._key = this._field;
                  }
                  // <flags>
                  else if (this._mark === 1)
                  {
                      // this._flags = this._field | 0;
                  }
                  // <bytes>
                  else if (this._mark === 2)
                  {
                      this._bytes = this._field | 0;
                  }
                  // <cas unique>
                  else if (this._mark === 3)
                  {
                      this._cas = this._field | 0;
                  }
                  else
                  {
                      this._state = S.ERROR_START;
                  }
                  
                  this._mark++;
                  break;
                  
                case S.VALUE_DATA_START : 
                  // \n
                  if (c === 0x0A)
                  {
                      break;
                  }
                  
                  index = i;
                  this._state = S.VALUE_DATA;
                  
                case S.VALUE_DATA : 
                  // <data block>\r\n
                  if (this._valueLength < this._bytes)
                  {
                      this._valueLength++;
                  }
                  // \r
                  else if (this._valueLength === this._bytes && c === 0x0D)
                  {
                      this._value += chunk.toString("utf8", index, i);
                      
                      if (~this._cas)
                      {
                          this._result[this._key] = {value: this._value, cas: this._cas};
                          this._cas = -1;
                      }
                      else
                      {
                          this._result[this._key] = this._value;
                      }
                      
                      this._state = S.VALUE_START;
                  }
                  else
                  {
                      this._state = S.ERROR_START;
                  }
                  
                  break;
                  
                case S.STAT_START : 
                  // \n
                  if (c === 0x0A)
                  {
                      break;
                  }
                  
                  index = i;
                  this._cmd = "";
                  this._key = "";
                  this._value = "";
                  this._field = "";
                  this._mark = 0;
                  this._state = S.STAT;
                  break;
                  
                case S.STAT : 
                  // space, \r
                  if (c !== 0x20 && c !== 0x0D)
                  {
                      break;
                  }
                  
                  this._cmd += chunk.toString("utf8", index, i);
                  
                  switch (this._cmd)
                  {
                      case "STAT" : 
                        this._state = S.STAT_FILED_START;
                        break;
                        
                      case "END" : 
                        this._state = S.END;
                        break;
                        
                      default : 
                        this._state = S.ERROR_START;
                  }
                  
                  break;
                  
                case S.STAT_FILED_START : 
                  index = i;
                  this._field = "";
                  this._state = S.STAT_FILED;
                  
                case S.STAT_FILED : 
                  // \r
                  if (c === 0x0D)
                  {
                      this._state = S.STAT_START;
                  }
                  // space
                  else if (c === 0x20)
                  {
                      this._state = S.STAT_FILED_START;
                  }
                  else
                  {
                      break;
                  }
                  
                  // STAT <name> <value>\r\n
                  this._field += chunk.toString("utf8", index, i);
                  
                  // <name>
                  if (this._mark === 0)
                  {
                      this._key = this._field;
                  }
                  // <value>
                  else if (this._mark === 1)
                  {
                      this._value = this._field;
                  }
                  else
                  {
                      this._state = S.ERROR_START;
                  }
                  
                  // \r
                  if (c === 0x0D)
                  {
                      this._result[this._key] = this._value;
                  }
                  else
                  {
                      this._mark++;
                  }
                  
                  break;
                  
                case S.VERSION_START : 
                  index = i;
                  this._state = S.VERSION;
                  break;
                  
                case S.VERSION : 
                  // \r
                  if (c !== 0x0D)
                  {
                      break;
                  }
                  
                  this._result = this._value + chunk.toString("utf8", index, i);
                  this._value = "";
                  this._state = S.END;
                  break;
                  
                case S.ERROR_INFO_START : 
                  index = i;
                  this._state = S.ERROR_INFO;
                  break;
                  
                case S.ERROR_INFO : 
                  // \r
                  if (c !== 0x0D)
                  {
                      break;
                  }
                  
                  this._text = this._value + chunk.toString("utf8", index, i);
                  this._value = "";
                  this._state = S.ERROR;
                  break;
                  
                case S.ERROR_START : 
                  // \n
                  if (c !== 0x0A)
                  {
                      break;
                  }
                  
                  this._text = "unknown command.";
                  this._state = S.ERROR;
                  
                case S.ERROR : 
                  this.onfinish(this._text);
                  this.onfinish = null;
                  
                  this._text = "";
                  this._result = null;
                  this._state = S.START;
                  
                  if (this._object.isPersistent)
                  {
                      this._object.isFinish = true;
                  }
                  else
                  {
                      this._object.pools.returnObject(this._object);
                  }
                  this._object.query.execute();
                  break;
                  
                case S.END : 
                  this.onfinish(null, this._result || {});
                  this.onfinish = null;
                  
                  this._result = null;
                  this._state = S.START;
                  
                  if (this._object.isPersistent)
                  {
                      this._object.isFinish = true;
                  }
                  else
                  {
                      this._object.pools.returnObject(this._object);
                  }
                  this._object.query.execute();
            }
        }
        
        switch (this._state)
        {
            case S.ANALYZE : 
            case S.VALUE_START : 
            case S.STAT_START : 
              this._cmd += chunk.toString("utf8", index);
              break;
              
            case S.VALUE_DATA : 
            case S.VERSION : 
            case S.ERROR_INFO : 
              this._value += chunk.toString("utf8", index);
              break;
              
            case S.VALUE_FILED : 
            case S.STAT_FILED : 
              this._field += chunk.toString("utf8", index);
              break;
        }
    }
};

module.exports = Parser;