/**
 * @author     LiuZhaoHui <hi.liuzhaoxin@gmail.com>
 * @link       http://www.eatbean.com/nodejs
**/

"use strict";

var Query = Dew("use", "DataBase.MySQL.Query");
var PersistentQuery = Dew("use", "DataBase.MySQL.PersistentQuery");
var Connect = Dew("use", "DataBase.MySQL.Connect");

var Mysql = 
{
    __name__ : "Mysql", 
    
    _servers : {}, 
    _current : null, 
    
    initialize : function (application)
    {
        if ("_isInitialize" in this) return;
        
        this._isInitialize = true;
        Query.initialize(application);
        Connect.initialize(application);
        
        application.useSection("mysql");
        var servers = application.get("connect");
        var i = 0, len = servers.length;
        
        for (; i < len; i++)
        {
            this.addServer(servers[i]);
        }
        
        len && this.use(servers[0].id);
    }, 
    
    // 返回一个 Mysql 实例
    getInstance : function (id)
    {
        var self = Object.create(this);
        undefined !== id && self.use(id);
        
        return self;
    }, 
    
    use : function (id)
    {
        if (!(id in this._servers))
        {
            throw new Error("Mysql: id is \"" + id + "\" server does not exist");
        }
        
        this._current = this._servers[id];
    }, 
    
    // 添加服务器
    // {
    //     "id" : "db1", 
    //     "host" : "127.0.0.1", 
    //     "port" : 3306, 
    //     "username" : "root", 
    //     "password" : "xiaoxin", 
    //     "dbname" : "dshop", 
    //     "charset" : "utf8"
    // }
    addServer : function (param)
    {
        this._servers[param.id] = Query.getInstance(Connect.getInstance(param));
    }, 
    
    query : function (sql, callback, extInfo)
    {
        this._current.addQuery(sql, callback, extInfo);
    }, 
    
    // 持久连接
    pconnect : function ()
    {
        // 当前对象不允许直接使用持久连接
        // 若需持久连接，代码如下
        // var db = Object.create(Mysql);
        // db.pconnect();
        // 用完后切记关闭持久连接，否则会造成连接一直处于闲置
        // db.pclose();
        if ("openPersistentQuery" in this || this === Mysql) return;
        this._current = new PersistentQuery(this._current).openPersistentQuery();
    }, 
    
    // 持久关闭
    pclose : function ()
    {
        if (!("closePersistentQuery" in this._current)) return;
        this._current = this._current.closePersistentQuery();
    }, 
    
    // 启动事务
    startTrans : function (callback)
    {
        if ("openPersistentQuery" in this || this === Mysql) return;
        this._current.addQuery("start transaction", callback);
    }, 
    
    // 用于非自动提交状态下面的查询提交
    commit : function (callback)
    {
        if (!("closePersistentQuery" in this._current)) return;
        this._current.addQuery("commit", callback);
    }, 
    
    // 事务回滚
    rollback : function (callback)
    {
        if (!("closePersistentQuery" in this._current)) return;
        this._current.addQuery("rollback", callback);
    }
};

module.exports = Mysql;