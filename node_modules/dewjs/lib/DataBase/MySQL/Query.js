/**
 * @author     LiuZhaoHui <hi.liuzhaoxin@gmail.com>
 * @link       http://www.eatbean.com/nodejs
**/

"use strict";

var Pools = Dew("use", "Common.Pools");

var Query = 
{
    __name__ : "Query", 
    
    _nowPools : 0, 
    
    initialize : function (application)
    {
        application.useSection("mysql");
        
        this._maxPools = application.get("max_pools");
    }, 
    
    // 返回一个 Query 实例
    getInstance : function (connect)
    {
        var self = Object.create(this);
        self._queue = [];
        self._pools = new Pools();
        self._connect = connect;
        
        return self;
    }, 
    
    addQuery : function (sql, callback, extInfo)
    {
        this._queue.push({type : 0, sql : sql, callback : callback, extInfo : extInfo});
        this.execute();
    }, 
    
    execute : function ()
    {
        var pools = this._pools;
        var obj = pools.borrowObject();
        
        if (obj === null)
        {
            if (this._nowPools === this._maxPools) return;
            this._nowPools++;
            
            obj = 
            {
                mysql : this._connect.create(), 
                pools : pools, 
                query : this, 
                swap : null, 
                values : [], 
                fields : [], 
                onfinish : null, 
                isPersistent : false, 
                isFinish : true
            };
            
            obj.field = EventCallback.field_.bind(obj);
            obj.row = EventCallback.row_.bind(obj);
            obj.end = EventCallback.end_.bind(obj);
            obj.error = EventCallback.error_.bind(obj);
            obj.getExtInfo = EventCallback.getExtInfo_.bind(obj);
            obj.setExtInfo = EventCallback.setExtInfo_.bind(obj);
            
            pools.addObject(obj);
            obj = pools.borrowObject();
        }
        
        var item = this._queue.shift();
        if (item === undefined)
        {
            return pools.returnObject(obj);
        }
        
        if (item.type === 0)
        {
            obj.onfinish = item.callback;
            obj.mysql
              .query(item.sql)
              .on("field", obj.field)
              .on("row", obj.row)
              .on("end", item.extInfo ? obj.getExtInfo : obj.end)
              .on("error", obj.error);
        }
        else
        {
            obj.isPersistent = true;
            obj.query = item.persistentQuery;
            item.persistentQuery._object = obj;
            item.persistentQuery.execute();
        }
    }
};

var EventCallback = 
{
    field_ : function (f)
    {
        this.fields.push(f.name);
    }, 
    
    row_ : function (r)
    {
        var data = {};
        var fields = this.fields;
        var i = 0, len = fields.length;
        
        while (i < len)
        {
            data[fields[i]] = r[i++];
        }
        
        this.values.push(data);
    }, 
    
    end_ : function ()
    {
        this.onfinish(null, this.values);
        this.onfinish = null;
        
        this.values = [];
        this.fields = [];
        
        if (this.isPersistent)
        {
            this.isFinish = true;
        }
        else
        {
            this.pools.returnObject(this);
        }
        
        this.query.execute();
    }, 
    
    error_ : function (err)
    {
        this.onfinish(err);
        this.onfinish = null;
        
        this.values = [];
        this.fields = [];
        
        if (this.isPersistent)
        {
            this.isFinish = true;
        }
        else
        {
            this.pools.returnObject(this);
        }
        this.query.execute();
    }, 
    
    getExtInfo_ : function ()
    {
        this.swap = this.values;
        this.values = [];
        this.fields = [];
        this.mysql
          .query("select row_count() as affectedRows,last_insert_id() as insertID")
          .on("field", this.field)
          .on("row", this.row)
          .on("end", this.setExtInfo)
          .on("error", this.error);
    }, 
    
    setExtInfo_ : function ()
    {
        this.onfinish(null, this.swap, this.values[0]);
        this.onfinish = null;
        
        this.swap = null;
        this.values = [];
        this.fields = [];
        
        if (this.isPersistent)
        {
            this.isFinish = true;
        }
        else
        {
            this.pools.returnObject(this);
        }
        this.query.execute();
    }
};

module.exports = Query;