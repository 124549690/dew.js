/**
 * @author     LiuZhaoHui <hi.liuzhaoxin@gmail.com>
 * @link       http://www.eatbean.com/nodejs
**/

"use strict";

var htmlClosingTag = 
[
    "area", "base", "br", "col", "command", 
    "embed", "hr", "img", "input", "keygen", 
    "link", "meta", "param", "source", "track", "wbr"
];

var ascii = 
{
    a: 0x61,				// a
    z: 0x7A, 				// z

    A: 0x41, 				// A
    Z: 0x5A,				// Z

    LT: 0x3C,				// 小于
    GT: 0x3E,				// 大于

    SPACE: 0x20,		// 空格
    TAB: 0x09,			// 制表符

    SQUOTE: 0x22,		// 双引号
    DQUOTE: 0x27,		// 单引号

    BACKSLASH: 0x5C,			// 反斜线 \ 
    FORWARDSLASH: 0x2F		// 正斜线 /
};

var tagState = 
{
    START: 1, 
    TAGS_LEFT_START:2, 
    TAGS_LEFT: 3, 
    TAGS_SPACE_START: 4, 
    TAGS_SPACE: 5, 
    TAGS_NAME_START: 6, 
    TAGS_NAME: 7, 
    TAGS_RIGHT_START: 8, 
    TAGS_RIGHT: 9
};

function HtmlSubString (data, length, dot)
{
    var A = ascii, S = tagState, T = htmlClosingTag;
    var state = S.START, stack = [], stackLen = -1;
    var closure = false, ret = "", mark = 0, count = 0;
    var i = 0, j = data.length, ord, tag, index, flags;
    
    for (; i < j && count < length; i++)
    {
        ord = data.charCodeAt(i);
        
        switch (state)
        {
            case S.START: 
              mark = i;
              state = S.TAGS_LEFT_START;
            
            case S.TAGS_LEFT_START: 
              if (ord === A.LT)
              {
                  count += i - mark;
                  
                  if (mark !== i)
                  {
                      ret += data.slice(mark, i);
                  }
                  
                  state = S.TAGS_LEFT;
              }
              break;
              
            case S.TAGS_LEFT: 
              if (ord === A.FORWARDSLASH)
              {
                  state = S.TAGS_SPACE_START;
              }
              else if (ord >= A.a && ord <= A.z || ord >= A.A && ord <= A.Z)
              {
                  mark = i;
                  state = S.TAGS_NAME;
              }
              else if (ord === A.GT)
              {
                  ret += ">";
                  state = S.START;
              }
              else
              {
                  i--;
                  state = S.TAGS_LEFT_START;
              }
              
              break;
              
            case S.TAGS_SPACE_START: 
              closure = true;
              state = S.TAGS_SPACE;
              
            case S.TAGS_SPACE: 
              if (ord === A.SPACE || ord === A.TAB)
              {
                  break;
              }
              
              state = S.TAGS_NAME_START;
              
            case S.TAGS_NAME_START: 
              mark = i;
              state = S.TAGS_NAME;
              
            case S.TAGS_NAME: 
              if (ord >= A.a && ord <= A.z || ord >= A.A && ord <= A.Z)
              {
                  break;
              }
              
              tag = data.slice(mark, i);
              
              if (closure === true)
              {
                  if (stackLen > -1 && stack[stackLen] == tag)
                  {
                      stack.pop();
                      stackLen--;
                  }
                  
                  ret += "</" + tag + ">";
                  
                  closure = false;
                  state = S.START;
                  break;
              }
              else if (ord === A.GT)
              {
                  stack.push(tag);
                  stackLen++;
                  
                  ret += "<" + tag + ">";
                  state = S.START;
                  break;
              }
              else if (T.indexOf(tag) > -1)
              {
                  ret += "<" + tag;
              }
              else
              {
                  stack.push(tag);
                  stackLen++;
                  
                  ret += "<" + tag;
              }
              
              mark = i;
              i--;
              state = S.TAGS_RIGHT_START;
              break;
              
            case S.TAGS_RIGHT_START: 
              index = 0;
              flags = 0;
              state = S.TAGS_RIGHT;
              
            case S.TAGS_RIGHT: 
              if (flags === 0)
              {
                  if (ord === A.SQUOTE || ord === A.DQUOTE)
                  {
                      flags |= ord;
                  }
                  else if (ord === A.GT)
                  {
                      ret += data.slice(mark, i) + ">";
                      state = S.START;
                  }
              }
              else if (ord === A.BACKSLASH)
              {
                  index = flags;
                  flags |= ~flags;
              }
              else if (ord === flags)
              {
                  index = 0;
                  flags = 0;
              }
              else if (flags === -1)
              {
                  flags = index;
              }
        }
    }
    
    if (state === S.TAGS_LEFT_START)
    {
        ret += data.slice(mark, i);
    }
    
    if (i < j)
    {
        ret += undefined === dot ? "..." : dot;
    }
    
    if (stackLen > -1)
    {
        stack.reverse();
        ret += "</" + stack.join("></") +">";
    }
    
    return ret;
}

module.exports = HtmlSubString;