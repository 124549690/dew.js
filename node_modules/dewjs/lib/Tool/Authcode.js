/**
 * @author     LiuZhaoHui <hi.liuzhaoxin@gmail.com>
 * @link       http://www.eatbean.com/nodejs
**/

"use strict";

module.exports = Authcode;

var LString = Dew("use", "Lang.LString");
var Base64 = Dew("use", "Tool.Base64");

function Authcode (string, operation, key, expiry)
{
    if (undefined === operation) operation = "DECODE";
    
    key = LString.md5(key);
    
    var time = new Date() / 1000 | 0;
    var ckeyLength = 4;
    var keya = LString.md5(key.slice(0, 16));
    var keyb = LString.md5(key.slice(16, 32));
    var keyc = "DECODE" === operation ? string.slice(0, ckeyLength) : 
      LString.md5(time.toString()).slice(-ckeyLength);
    
    var cryptkey = keya + LString.md5(keya + keyc);
    var keyLength = cryptkey.length;
    
    if ("DECODE" === operation)
    {
        string = Base64.decode(string.slice(ckeyLength));
    }
    else
    {
        if (undefined === expiry) expiry = 0;
        string = (expiry ? time + expiry : "0000000000") + 
          LString.md5(string + keyb).slice(0, 16) + string;
    }
    
    var stringLength = string.length;
    
    var result = "";
    var box = [];
    var rndkey = [];
    var i, j, k, l = 256;
    
    for (i = 0; i < l; i++)
    {
        box[i] = i;
    }
    
    for (i = 0; i < l; i++)
    {
        rndkey[i] = cryptkey[i % keyLength].charCodeAt();
    }
    
    for (i = j = 0; i < l; i++)
    {
        j = (j + box[i] + rndkey[i]) % l;
        box[i] ^= box[j];
        box[j] ^= box[i];
        box[i] ^= box[j];
    }
    
    for (i = j = k = 0; i < stringLength; i++)
    {
        k = ++k % l;
        j = (j + box[k]) % l;
        box[k] ^= box[j];
        box[j] ^= box[k];
        box[k] ^= box[j];
        result += String.fromCharCode(string[i].charCodeAt() ^ box[(box[k] + box[j]) % l]);
    }
    
    if ("DECODE" === operation)
    {
        var record = result.slice(0, 10) | 0;
        if ((0 === record || record - time > 0)
          && result.slice(10, 26) === LString.md5(result.slice(26) + keyb).slice(0, 16))
        {
            return result.slice(26);
        }
        else
        {
            return "";
        }
    }
    else
    {
        return keyc + Base64.encode(result).replace(/=/g, "");
    }
}