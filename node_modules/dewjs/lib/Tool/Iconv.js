/**
 * @author     LiuZhaoHui <hi.liuzhaoxin@gmail.com>
 * @link       http://www.eatbean.com/nodejs
**/

"use strict";

var fs = require("fs");
var path = require("path");

var Iconv = 
{
    __name__ : "Iconv", 
    
    ICONV_TYPE : ["utf8", "utf16", "gb2312"], 
    FILE_GB2312_UNICODE : path.normalize(__dirname + "/iconv_gb2312_to_unicode.table"), 
    
    get unicodeToGb2312Table ()
    {
        if (!this._unicodeToGb2312Table)
        {
            this._unicodeToGb2312Table = this._readyTable(this.FILE_GB2312_UNICODE, true);
        }
        
        return this._unicodeToGb2312Table;
    }, 
    
    get gb2312ToUnicodeTable ()
    {
        if (!this._gb2312ToUnicodeTable)
        {
            this._gb2312ToUnicodeTable = this._readyTable(this.FILE_GB2312_UNICODE);
        }
        
        return this._gb2312ToUnicodeTable;
    }, 
    
    _readyTable : function (file, isReverse)
    {
        var buf = fs.readFileSync(file), ret = {};
        var i = 0, len = buf.length;
        var from, to, c, index;
        
        for (; i < len; i++)
        {
            c = buf[i];
            
            // \r || \n
            if (c === 0x0A || c === 0x0D)
            {
                continue;
            }
            
            // 0
            if (c !== 0x30)
            {
                while (++i < len)
                {
                    c = buf[i];
                    
                    if (c === 0x0A || c === 0x0D)
                    {
                        while (++i < len)
                        {
                            c = buf[i];
                            
                            if (c !== 0x0A && c !== 0x0D)
                            {
                                --i;
                                break;
                            }
                        }
                        
                        break;
                    }
                }
                
                continue;
            }
            
            // 0x
            i += 2;
            index = i;
            
            while (++i < len)
            {
                c = buf[i];
                
                // \t
                if (c === 0x09)
                {
                    break;
                }
            }
            
            from = buf.slice(index, i).toString().toLowerCase();
            
            while (++i < len)
            {
                c = buf[i];
                
                // 0
                if (c === 0x30)
                {
                    break;
                }
            }
            
            // 0x
            i += 2;
            index = i;
            
            while (++i < len)
            {
                c = buf[i];
                
                // \t
                if (c === 0x09)
                {
                    break;
                }
            }
            
            to = buf.slice(index, i).toString().toLowerCase();
            
            if (isReverse)
            {
                ret[to] = from;
            }
            else
            {
                ret[from] = to;
            }
        }
        
        return ret;
    }, 
    
    utf16_to_utf8 : function (data)
    {
        var i = 0, len = data.length;
        var c1, c2, ret = "";
        
        for (; i < len; i++)
        {
            c1 = data.charCodeAt(i);
            
            if (c1 < 0x80)
            {
                ret += data[i];
            }
            else if(c1 < 0x800)
            {
                ret += String.fromCharCode(0xc0 | c1 >>> 6, 0x80 | c1 & 0x3f);
            }
            else if(c1 < 0xd800 || c1 > 0xdfff)
            {
                ret += String.fromCharCode(0xe0 | c1 >>> 12, 0x80 | c1 >>> 6 & 0x3f, 0x80 | c1 & 0x3f);
            }
            else if (i + 1 > len)
            {
                c2 = data.charCodeAt(++i);
                
                if (c1 < 0xDC00 && 0xDC00 <= c2 && c2 < 0xE000)
                {
                    c1 = ((c1 & 0x03ff) << 10 | (c2 & 0x03ff)) + 0x010000;
                    
                    if (0x010000 <= c1 && c1 < 0x110000)
                    {
                      ret += String.fromCharCode(0xf0 | c1 >>> 18 & 0x3f, 0x80 | c1 >>> 12 & 0x3f, 0x80 | c1 >>> 6 & 0x3f, 0x80 | c1 & 0x3f);
                    }
                    else
                    {
                      ret += "?";
                    }
                }
                else
                {
                    i--;
                    ret += "?";
                }
            }
            else
            {
                ret += "?";
            }
        }
        
        return ret;
    }, 
    
    utf8_to_utf16 : function (data)
    {
        var i = 0, j = data.length;
        var c1, c2, c3, c4, c5, ret = "";
        
        for (; i < j; i++)
        {
            c1 = data.charCodeAt(i);
            switch (c1 >> 4)
            {
                // 0xxx xxxx
                case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: 
                  ret += data[i];
                  break;
                
                // 110x xxxx 10xx xxxx
                case 12: case 13: 
                  c2 = data.charCodeAt(++i);
                  ret += String.fromCharCode((c1 & 0x1f) << 6 | c2 & 0x3f);
                  break;
                
                // 1110 xxxx 10xx xxxx 10xx xxxx
                case 14: 
                  c2 = data.charCodeAt(++i);
                  c3 = data.charCodeAt(++i);
                  ret += String.fromCharCode((c1 & 0x0f) << 12 | (c2 & 0x3f) << 6 | c3 & 0x3f);
                  break;
                
                case 15: 
                    switch(c1 & 0xf)
                    {
                        // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx
                        case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: 
                          c2 = data.charCodeAt(++i);
                          c3 = data.charCodeAt(++i);
                          c4 = data.charCodeAt(++i);
                          c5 = (c1 & 0x07) << 18 | (c2 & 0x3f) << 12 | (c3 & 0x3f) << 6 | (c4 & 0x3f) - 0x10000;
                          if(0 <= c5 && c5 < 0x100000)
                          {
                              ret += String.fromCharCode((c5 >>> 10) & 0x03ff | 0xd800, c5 & 0x03ff | 0xdc00);
                          }
                          else
                          {
                              ret += "?";
                          }
                          break;
                        
                        // 1111 10xx 10xx xxxx 10xx xxxx 10xx xxxx 10xx xxxx
                        case 8: case 9: case 10: case 11: 
                          i += 5;
                          ret += "?";
                          break;
                        
                        // 1111 110x 10xx xxxx 10xx xxxx 10xx xxxx 10xx xxxx 10xx xxxx
                        case 12: case 13: 
                          i += 6;
                          ret += "?";
                          break;
                    }
            }
        }
        return ret;
    }, 
    
    // fs.writeFileSync("text.txt", utf16_to_gb2312("刘昭辉"), "ascii");
    utf16_to_gb2312 : function (data)
    {
        var	table = this.unicodeToGb2312Table;
        var i = 0, len = data.length;
        var ord, c, gb, ret = "";
        
        for (; i < len; i++)
        {
            ord = data[i].charCodeAt();
            
            if (ord < 0x80)
            {
                ret += data[i];
            }
            else
            {
                gb = table[ord.toString(16)];
                
                if (!gb)
                {
                    ret += "?";
                }
                else
                {
                    c = (parseInt(gb, 16) + 0x8080).toString(16);
                    ret += String.fromCharCode(parseInt(c.slice(0, 2), 16), parseInt(c.slice(2), 16));
                }
            }
        }
        
        return ret;
    }, 
    
    utf8_to_gb2312 : function (data)
    {
        var table = this.unicodeToGb2312Table;
        var i = 0, len = data.length;
        var ord, c, gb, ret = "";
        
        for (; i < len; i++)
        {
            ord = data.charCodeAt(i);
            c = ord >> 4;
            
            if (c > -1 && c < 8)
            {
                ret += data[i];
                continue;
            }
            else if (c > 11 && c < 14)
            {
                c = (ord & 0x1f) << 6 | data.charCodeAt(++i) & 0x3f;
            }
            else if (c === 14)
            {
                c = (ord & 0x0f) << 12 | (data.charCodeAt(++i) & 0x3f) << 6 | data.charCodeAt(++i) & 0x3f;
            }
            else if (c === 15)
            {
                c = ord & 0xf;
                
                if (c > -1 && c < 8)
                {
                    c = (ord & 0x07) << 18 | (data.charCodeAt(++i) & 0x3f) << 12 | 
                      (data.charCodeAt(++i) & 0x3f) << 6 | 
                      (data.charCodeAt(++i) & 0x3f) - 0x10000;
                    if (c > -1 && c <0x100000)
                    {
                        c = (c >>> 10) & 0x03ff | 0xd800, c & 0x03ff | 0xdc00;
                    }
                    else
                    {
                        ret += "?";
                        continue;
                    }
                }
                else if (c > 7 && c < 12)
                {
                    i += 5;
                    ret += "?";
                    continue;
                }
                else if (c > 11 && c < 14)
                {
                    i += 6;
                    ret += "?";
                    continue;
                }
            }
            
            gb = table[c.toString(16)];
            
            if (!gb)
            {
                ret += "?";
            }
            else
            {
                c = (parseInt(gb, 16) + 0x8080).toString(16);
                ret += String.fromCharCode(parseInt(c.slice(0, 2), 16), parseInt(c.slice(2), 16));
            }
        }
        
        return ret;
    },
    
    gb2312_to_utf16 : function (data)
    {
        var	table = this.gb2312ToUnicodeTable;
        var i = 0, len = data.length;
        var ord, c, ret = "";
        
        for (; i < len; i++)
        {
            ord = data.charCodeAt(i);
            
            if (ord < 0x80)
            {
                ret += data[i];
            }
            else if (i + 1 !== len)
            {
                c = data[i++].charCodeAt().toString(16);
                c += data[i].charCodeAt().toString(16);
                ret += String.fromCharCode(parseInt(table[(parseInt(c, 16) - 0x8080).toString(16)], 16));
            }
            else
            {
                ret += "?";
            }
        }
        
        return ret;
    }, 
    
    gb2312_to_utf8 : function (data)
    {
        var	table = this.gb2312ToUnicodeTable;
        var i = 0, len = data.length;
        var ord, c, ret = "";
        
        for (; i < len; i++)
        {
            ord = data.charCodeAt(i);
            
            if (ord < 0x80)
            {
                ret += data[i];
            }
            else if (i + 1 !== len)
            {
                c = data[i++].charCodeAt().toString(16);
                c += data[i].charCodeAt().toString(16);
                c = parseInt(table[(parseInt(c, 16) - 0x8080).toString(16)], 16);
                
                if (c < 0x80)
                {
                    ret += data[i];
                }
                else if (c < 0x800)
                {
                    ret += String.fromCharCode(0xC0 | c >> 6, 0x80 | c & 0x3F);
                }
                else if (c < 0x10000)
                {
                    ret += String.fromCharCode(0xE0 | c >> 12, 0x80 | c >> 6 & 0x3F, 0x80 | c & 0x3F);
                }
                else if (c < 0x200000)
                {
                    ret += String.fromCharCode(0xF0 | c >> 18, 0x80 | c >> 12 & 0x3F, 0x80 | c >> 6 & 0x3F, 0x80 | c & 0x3F);
                }
            }
            else
            {
                ret += "?";
            }
        }
        
        return ret;
    }
};

/*
utf8 -> utf16 or utf8 - > gb2312
utf16 -> utf8 or utf16 -> gb2312
gb2312 -> utf16 or gb2312 -> utf8
*/
module.exports = function (inCharset, outCharset, value)
{
    if (Iconv.ICONV_TYPE.indexOf(inCharset) < 0 
        || Iconv.ICONV_TYPE.indexOf(outCharset) < 0)
    {
        return "";
    }
    return Iconv[inCharset + "_to_" + outCharset](value);
};