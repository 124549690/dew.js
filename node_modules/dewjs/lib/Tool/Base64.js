/**
 * @author     LiuZhaoHui <hi.liuzhaoxin@gmail.com>
 * @link       http://www.eatbean.com/nodejs
**/

"use strict";

var BASE64_ENCODE_TABLE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
var BASE64_DECODE_TABLE = 
[
    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,
    -1,-1,-1,63,52,53,54,55,56,57,58,59,60,61,-1,-1,-1,-1,-1,-1,-1,0,
    1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,
    -1,-1,-1,-1,-1,-1,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,
    42,43,44,45,46,47,48,49,50,51,-1,-1,-1,-1,-1
];

var Base64 = 
{
    __name__ : "Base64", 
    
    /**
     * @brief encode 使用 MIME base64 对数据进行编码
     * @param {string} str 需要进行编码的字符串
     * @return {string} 返回编码后的字符串
    **/
    encode : function (str)
    {
        var	T = BASE64_ENCODE_TABLE;
        var i = 0, len = str.length, out = '', c1, c2, c3;
        
        while (i < len)
        {
            c1 = str.charCodeAt(i++) & 0xff;
            if (i == len)
            {
                out += T.charAt(c1 >> 2);
                out += T.charAt((c1 & 0x3) << 4);
                out += '==';
                break;
            }
            c2 = str.charCodeAt(i++);
            if (i == len)
            {
                out += T.charAt(c1 >> 2);
                out += T.charAt(((c1 & 0x3) << 4) | ((c2 & 0xF0) >> 4));
                out += T.charAt((c2 & 0xF) << 2);
                out += '=';
                break;
            }
            c3 = str.charCodeAt(i++);
            out += T.charAt(c1 >> 2);
            out += T.charAt(((c1 & 0x3) << 4) | ((c2 & 0xF0) >> 4));
            out += T.charAt(((c2 & 0xF) << 2) | ((c3 & 0xC0) >> 6));
            out += T.charAt(c3 & 0x3F);
        }
        return out;
    },

    /**
     * @brief decode 对使用 MIME base64 编码的数据进行解码
     * @param {string} str 需要进行解码的字符串
     * @return {string} 返回解码后的字符串
    **/
    decode : function (str)
    {
        var T = BASE64_DECODE_TABLE;
        var i = 0, len = str.length, out = '', c1, c2, c3, c4;
        
        while (i < len)
        {
            /* c1 */
            do{
                c1 = T[str.charCodeAt(i++) & 0xff];
            } while (i < len && c1 == -1);
            if (c1 == -1) break;
            /* c2 */
            do{
                c2 = T[str.charCodeAt(i++) & 0xff];
            } while (i < len && c2 == -1);
            if (c2 == -1) break;
            out += String.fromCharCode((c1 << 2) | ((c2 & 0x30) >> 4)); /* c3 */
            do{
                c3 = str.charCodeAt(i++) & 0xff;
                if (c3 == 61) return out;
                c3 = T[c3];
            } while (i < len && c3 == -1);
            if (c3 == -1) break;
            out += String.fromCharCode(((c2 & 0XF) << 4) | ((c3 & 0x3C) >> 2)); /* c4 */
            do{
                c4 = str.charCodeAt(i++) & 0xff;
                if (c4 == 61) return out;
                c4 = T[c4];
            } while (i < len && c4 == -1);
            if (c4 == -1) break;
            out += String.fromCharCode(((c3 & 0x03) << 6) | c4);
        }
        return out;
    }
};

module.exports = Base64;