/**
 * @author     LiuZhaoHui <hi.liuzhaoxin@gmail.com>
 * @link       http://www.eatbean.com/nodejs
**/

"use strict";

var crypto = require("crypto");
var LMath = Dew("use", "Lang.LMath");

var LString = 
{
    __name__ : "LString", 
    
    // 当字符串包含 substr 时返回 true
    contains : function (str, substr)
    {
        return !~str.indexOf(substr);
    }, 
    
    // 测试此字符串是否以指定的前缀开始
    startsWith : function (str, prefix, offset)
    {
        var len = prefix.length;
        
        if (len > str.length)
        {
            return false;
        }
        
        offset = isNaN(offset) ? 0 : parseInt(offset);
        
        while (offset < len)
        {
            if (prefix[offset] !== str[offset++])
            {
                return false;
            }
        }
        
        return true;
    }, 
    
    // 测试此字符串是否以指定的后缀结束
    endsWith : function (str, suffix)
    {
        var len = suffix.length, i = str.length;
        
        if (len > i)
        {
            return false;
        }
        
        while (~--len)
        {
            if (suffix[len] !== str[--i])
            {
                return false;
            }
        }
        
        return true;
    }, 
    
    // format("age: %d", 23);
    // 使用指定的格式字符串和参数返回一个格式化字符串
    format : function (str /*, args... */)
    {
        var mark = "%", ret = "";
        var args = Array.prototype.slice.call(arguments, 1);
        var i = 0, len = args.length;
        var offset = str.indexOf(mark), index = 0;
        
        if (~offset)
        {
            do
            {
                ret += str.slice(index, offset);
                
                switch (str[++offset])
                {
                    case "s" : ret += args[i++].toString(); break;
                    case "d" : ret += args[i++].valueOf(); break;
                    case "j" : ret += JSON.stringify(args[i++]); break;
                    default : ret += str[offset];
                }
                
                index = ++offset;
                offset = str.indexOf(mark, index);
            } while (~offset);
        }
        else
        {
            return str;
        }
        
        return ret + str.slice(index);
    }, 
    
    /**
     * @brief addSlashes 使用反斜线引用字符串
     * @e.g: ' " \ NUL
     * @param {string} str 需要添加反斜杠的字符串
     * @return {string} 返回添加反斜杠的字符串
    **/
    addSlashes : function (str)
    {
        return str.replace(/(\'|\"|\\)/g, "\\$1").replace(/\x00/g, "\\0");
    }, 
    
    CRC32_TABLE : 
    [
        0x00000000, 0x77073096, 0xee0e612c, 0x990951ba,
        0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3,
        0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988,
        0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91,
        0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de,
        0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,
        0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec,
        0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5,
        0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172,
        0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,
        0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940,
        0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,
        0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116,
        0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f,
        0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,
        0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d,
        0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a,
        0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,
        0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818,
        0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,
        0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e,
        0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457,
        0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c,
        0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,
        0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2,
        0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb,
        0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0,
        0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9,
        0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086,
        0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,
        0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4,
        0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad,
        0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a,
        0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683,
        0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8,
        0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,
        0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe,
        0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7,
        0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc,
        0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,
        0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252,
        0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,
        0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60,
        0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79,
        0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,
        0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f,
        0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04,
        0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,
        0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a,
        0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,
        0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38,
        0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21,
        0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e,
        0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,
        0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c,
        0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45,
        0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2,
        0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db,
        0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0,
        0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,
        0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6,
        0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf,
        0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94,
        0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d
    ], 

    /**
     * @brief crc32 计算一个字符串的 crc32 多项式
     * @param {string} str 需要计算的字符串
     * @return {number} 返回计算后的结果
    **/
    crc32 : function  (str)
    {
        var T = this.CRC32_TABLE, crc = ~0;
        var i = 0, len = str.length;
        
        for (; i < len; i++)
        {
            crc = (crc >>> 8) ^ T[(crc ^ str.charCodeAt(i)) & 0xff];
        }
        
        return crc ^ -1;
    }, 
    
    /**
     * @brief html_entity 字符转换为 HTML 实体
     * @param {string} str 需要转换的字符串
     * @return {string} 返回转后的字符串
    **/
    htmlEntity : function (str)
    {
        return str
          .replace(/&(?!\w+;)/g, "&amp;")
          .replace(/</g, "&lt;")
          .replace(/>/g, "&gt;")
          .replace(/"/g, "&quot;");
    }, 
    
    /**
     * @brief htmlEntityDecode 把 HTML 实体转换为字符
     * @param {string} str 需要转换的字符串
     * @return {string} 返回转后的字符串
    **/
    htmlEntityDecode : function (str)
    {
        return str
          .replace(/&amp;/g, "&")
          .replace(/&lt;/g, "<")
          .replace(/&gt;/g, ">")
          .replace(/&quot;/g, '"');
    }, 
    
    /**
     * @brief lcfirst 将字符串的首字母转换为写
     * @param {string} str 需要转换的字符串
     * @return {string} 返回转换后的字符串
    **/
    lcfirst : function (str)
    {
        return str[0].toLowerCase() + str.slice(1);
    }, 
    
    /**
     * @brief ucfirst 将字符串的首字母转换为大写
     * @param {string} str 需要转换的字符串
     * @return {string} 返回转换后的字符串
    **/
    ucfirst : function (str)
    {
        return str[0].toUpperCase() + str.slice(1);
    }, 
    
    /**
     * @brief 计算字符串的 MD5 散列
     * @param {string} str 需要计算的字符串
     * @param {string} encoding 计算后的结果如何保存。默认 hex, 可选 base64, binary
     * @return {string} 返回所计算后的字符串
    **/
    md5 : function (str, encoding)
    {
        return crypto.createHash("md5").update(str)
          .digest(undefined === encoding ? "hex" : encoding);
    }, 
    
    /**
     * @brief nl2br 将换行符转换为 html 换行标记
     * @param {string} str 需要转换的字符串
     * @return {string} 返回转换后的字符串
    **/
    nl2br : function (str, isXHTML)
    {
        return str.replace(/\r?\n|\r\n?/g, !isXHTML ? "<br />" : "<br>");
    }, 
    
    /**
     * @brief quoteMeta 在某些预定义的字符前添加反斜杠
     * @e.g: . \ + * ? [ ^ ] ( $ )
     * @param {string} str 需要转义的字符串
     * @return {string} 返回转义后的字符串
    **/
    quoteMeta : function (str)
    {
        return str.replace(/(\.|\\|\+|\*|\?|\[|\^|\]|\(|\$|\))/g, "\\$1");
    }, 
    
    STR_PAD_LEFT : 0, 
    STR_PAD_RIGHT : 1, 
    STR_PAD_BOTH : 2, 
    
    /**
     * @brief strPad 把字符串填充为指定的长度
     * @param {string} input 要填充的字符串
     * @param {number} padLength 新字符串的长度
     * @param {string} padString 供填充使用的字符串，默认为空格
     * @param {number or const} padType 填充那边的字符串
     *   @padType STR_PAD_RIGHT or 1, STR_PAD_LEFT or 0, STR_PAD_BOTH or 2
     * @return {string} 返回填充后的字符串
    **/
    strPad : function (input, padLength, padString, padType)
    {
        var L = "", R = "";
        var l = false, r = false;
        var pl = padString.length - 1;
        var len = padLength - input.length;
        var p = 0, chr;
        
        if (len < 1)
        {
            return input;
        }
        
        switch (padType)
        {
            case this.STR_PAD_LEFT : l = true; break;
            case this.STR_PAD_BOTH : l = true; r = true; break;
            case this.STR_PAD_RIGHT : default : r = true;
        }
        
        do
        {
            if (p > pl)
            {
                p = 0;
            }
            
            chr = padString[p++];
            
            if (r && len)
            {
                R += chr;
                len--;
            }
            
            if (l && len)
            {
                L += chr;
                len--;
            }
        } while (len);
        
        return L + input + R;
    }, 
    
    /**
     * @brief strRepeat 把字符串重复指定的次数
     * @param {string} input 需要重复的字符串
     * @param {number} multiplier 需要重复的次数
     * @return {string} 返回 input 重复 multiplier 次后的结果
    **/
    strRepeat : function (input, multiplier)
    {
        multiplier = isNaN(multiplier) ? 0 : parseInt(multiplier);
        
        var ret = "";
        
        while(~--multiplier)
        {
            ret += input;
        }
        
        return ret;
    }, 
    
    /**
     * @brief strShuffle 随机打乱一个字符串
     * @param {string} str 需要打乱字符串
     * @return {string} 返回打乱后的字符串
    **/
    strShuffle : function (str)
    {
        var ret = new Buffer(str);
        var i = 0, len = ret.length - 1, c;
        
        for (; i < len; i++)
        {
            c = math.rand(i + 1, len);
            ret[i] ^= ret[c];
            ret[c] ^= ret[i];
            ret[i] ^= ret[c];
        }
        
        return ret.toString();
    }, 
    
    /**
     * @brief stripTags 从字符串中去除 HTML 标记
     * @param {string} str 需要去除标记的字符串
     * @return {string} 返回除去标记的字符串
    **/
    stripTags : function(str)
    {
        return str.replace(/<[\s\S]+?>/g, "");
    }, 
    
    // 获取指定字符集的字符串长度
    strlen : function (str, charset, step)
    {
        charset = undefined === charset ? "utf8" : charset;
        step = isNaN(step) ? 1 : step | 0;
        
        var i = 0, len = str.length;
        var n = 0, p, c;
        
        if ("utf8" === charset)
        {
            for (; i < len; i++)
            {
                c = str.charCodeAt(i);
                
                if (c > 252)
                {
                    p = 5;
                }
                else if (c > 248)
                {
                    p = 4;
                }
                else if (c > 240)
                {
                    p = 3;
                }
                else if (c > 224)
                {
                    p = 2;
                }
                else if (c > 192)
                {
                    p = 1;
                }
                else
                {
                    n++;
                    continue;
                }
                
                i += p;
                n += step;
            }
        }
        else
        {
            for (; i < len; i++)
            {
                c = str.charCodeAt(i);
                
                if(c > 127)
                {
                    p = 1;
                }
                else
                {
                    n++;
                    continue;
                }
                
                //i += p;
                n += step;
            }
        }
        
        return n;
    }, 
    
    /**
     * @brief substrCount 计算子串在字符串中出现的次数
     * @param {string} 在此字符串中进行搜索
     * @param {string} 要搜索的字符串
     * @param {number} 开始计数的偏移位置
     * @param {number} 指定偏移位置之后的最大搜索长度
     * @return {number} 返回出现的次数
    **/
    substrCount : function (haystack, needle, offset, length)
    {
        var hl = haystack.length, nl = needle.length;
        var offset = offset === undefined ? 0 : offset > hl ? 0 : offset;
        var length = length === undefined ? hl : length > hl ? hl : length;
        var c = 0, n = 0;
        
        do
        {
            if (c === nl)
            {
                n++;
                c = 0;
                offset++;
            }
            else if (haystack[offset] === needle[c])
            {
                c++;
                offset++;
            }
            else
            {
                c = 0;
                offset += nl - 1;
            }
            
        } while (offset <= length);
        
        return n;
    }, 
    
    // 转义常见控制符
    quote : function (str)
    {
        var i = 0, len = str.length;
        var ret = "", ord, chr;
        
        for (; i < len; i++)
        {
            chr = str[i];
            ord = chr.charCodeAt();
            
            switch (ord)
            {
                case 0x22 : ret += "\\\""; break;
                case 0x2F : ret += "\\/"; break;
                case 0x5C : ret += "\\\\"; break;
                case 0x08 : ret += "\\b"; break;
                case 0x0C : ret += "\\f"; break;
                case 0x0a : ret += "\\n"; break;
                case 0x0d : ret += "\\r"; break;
                case 0x09 : ret += "\\t"; break;
                default : 
                  if (ord > 0xff)
                  {
                      ret += (ord > 0xfff ? "\\u" : "\\u0") + ord.toString(16);
                  }
                  else
                  {
                      ret += chr;
                  }
            }
        }
        
        return ret;
    }, 
    
    // 计算字节长度
    sizeof : function (str, charset)
    {
        if (undefined === charset)
        {
            charset = "utf8";
        }
        
        var i = 0, len = str.length;
        var n = 0, c;
        
        // utf-16 是 javascript 本地字符集
        if ("utf16" === charset)
        {
            for (; i < len; i++)
            {
                c = str.charCodeAt(i);
                
                if (c < 65536)
                {
                    n += 2;
                }
                else
                {
                    n += 4;
                }
            }
        }
        else if ("utf8" === charset)
        {
            for (; i < len; i++)
            {
                c = str.charCodeAt(i);
                
                if (c < 128)
                {
                    n++;
                }
                else if (c < 2048)
                {
                    n += 2;
                }
                else if (c < 65536)
                {
                    n += 3;
                }
                else
                {
                    n += 4;
                }
            }
        }
        else if ("gbk" === charset)
        {
            for (; i < len; i++)
            {
                c = str.charCodeAt(i);
                
                if (c < 128)
                {
                    n++;
                }
                else
                {
                    n += 2;
                }
            }
        }
        
        return n;
    }, 
    
    // 把指定的字符串转换为骆驼峰式
    camelize : function (str)
    {
        var mark = "-", ret = "";
        var offset = str.indexOf(mark), index = 0;
        
        if (~offset)
        {
            do
            {
                ret += str.slice(index, offset) + str[++offset].toUpperCase();
                index = ++offset;
                offset = str.indexOf(mark, index);
            } while (~offset);
        }
        else
        {
            return str;
        }
        
        return ret + str.slice(index);
    }, 
    
    // 把骆驼峰式转换为指定字符串
    uncamelize : function (str)
    {
        return str.replace(/[A-Z]/g, function($1){return "-" + $1.toLowerCase();});
    }
};

module.exports = LString;