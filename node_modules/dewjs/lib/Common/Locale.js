/**
 * @author     LiuZhaoHui <hi.liuzhaoxin@gmail.com>
 * @link       http://www.eatbean.com/nodejs
**/

"use strict";

var fs = require("fs");
var path = require("path");

module.exports = Locale;

function Locale (directory/*, language*/)
{
    directory && this.setDirectory(directory);
    //language && this.setLanguage(language);
    
    this._cacheTranslations = {};
}

Locale.prototype = 
{
    constructor : Locale, 
    __name__ : "Locale", 
    
    _invalidCharsRegex : new RegExp("[^\\w\\/\\\\.:-]"), 
    
    get current ()
    {
        return this._currentDomain;
    }, 
    
    // 设置目录
    setDirectory : function (dir)
    {
        this._directory = dir;
    }, 
    
    // 获取目录
    getDirectory : function ()
    {
        return this._directory;
    }, 
    
    // 设置语种
    setLanguage : function (lang)
    {
        if ("_languageList" in this && "_defaultLanguage" in this)
        {
            if (!(lang in this._languageList))
            {
                lang = this._defaultLanguage;
            }
            
            this._languageName = this._languageList[lang];
        }
        
        if (!(lang in this._cacheTranslations))
        {
            this._cacheTranslations[lang] = {};
        }
        
        this._language = lang;
        this._currentDomain = null;
        this._currentTranslations = this._cacheTranslations[lang];
    }, 
    
    // 获取语种
    getLanguage : function ()
    {
        return this._language;
    }, 
    
    // 设置默认语种
    setDefaultLanguage : function (lang)
    {
        this._defaultLanguage = lang;
    }, 
    
    // 获取默认语种
    getDefaultLanguage : function ()
    {
        return this._defaultLanguage;
    }, 
    
    // 设置语言列表
    setLanguageList : function (list)
    {
        this._languageList = list;
    }, 
    
    // 获取语言列表
    getLanguageList : function ()
    {
        return this._languageList;
    }, 
    
    // 获得语种名
    getLanguageName : function ()
    {
        return this._languageName;
    }, 
    
    // 载入语言包
    load_ : function (name)
    {
        var fp = path.normalize(this.getDirectory() + "/" + this.getLanguage() + "/" + name);
        
        this.securityCheck_(fp);
        
        if (fs.existsSync(fp) && fs.statSync(fp).isFile())
        {
            this._currentTranslations[name] = JSON.parse(fs.readFileSync(fp, "utf8"));
        }
        else
        {
            throw new Error("File " + name + " does not exist");
        }
        
        this._currentDomain = this._currentTranslations[name];
    }, 
    
    // 检查路径字符
		securityCheck_ : function (filename)
		{
				if (this._invalidCharsRegex.test(filename))
				{
						throw new Error("Illegal character in \"" + filename + "\"");
				}
		}, 
    
    // 使用语言包文件
    use : function (name)
    {
        if (!(name in this._currentTranslations))
        {
            this.load_(name);
        }
        
        this._currentDomain = this._currentTranslations[name];
        
        return this;
    }, 
    
    // 获取语言包字符串
    get : function (text)
    {
        return text in this._currentDomain ? this._currentDomain[text] : text;
    }
};