/**
 * @author     LiuZhaoHui <hi.liuzhaoxin@gmail.com>
 * @link       http://www.eatbean.com/nodejs
**/

"use strict";

var fs = require("fs");
var path = require("path");

module.exports = Config;

function Config (directory, allowModify, data)
{
    directory && this.setDirectory(directory);
    
    this._allowModify = !!allowModify;
    
    if (data !== null && "object" === typeof data)
    {
        this._loaded = data;
        this._current = data;
    }
    else
    {
        this._loaded = {};
    }
}

Config.prototype = 
{
    constructor : Config, 
    __name__ : "Config", 
    
    _invalidCharsRegex : new RegExp("[^\\w\\/\\\\.:-]"), 
    
    setDirectory : function (dir)
    {
        this._directory = dir;
    }, 
    
    getDirectory : function ()
    {
        return this._directory;
    }, 
    
    get current ()
    {
        return this._current;
    }, 
    
    load_ : function (name)
    {
        var fp = path.normalize(this._directory + "/" + name);
        
        this._securityCheck(fp);
        
        if (fs.existsSync(fp) && fs.statSync(fp).isFile())
        {
            this._loaded[name] = JSON.parse(fs.readFileSync(fp, "utf8"));
        }
        else
        {
            throw new Error("File " + name + " does not exist");
        }
        
        this._current = this._loaded[name];
    }, 
    
		_securityCheck : function (filename)
		{
				if (this._invalidCharsRegex.test(filename))
				{
						throw new Error("Illegal character in \"" + filename + "\"");
				}
		}, 
    
    use : function (name)
    {
        if (!(name in this._loaded))
        // if (undefined === this._loaded[name])
        {
            this.load_(name);
        }
        
        this._current = this._loaded[name];
        
        return this;
    }, 
    
    has : function (key)
    {
        return key in this._current;
    }, 
    
    get : function (key, def)
    {
        if (!(key in this._current))
        {
            return def;
        }
        
        return this._current[key];
    }, 
    
    add : function (key, value)
    {
        !(key in this._current) && this.set(key, value);
    }, 
    
    set : function (key, value)
    {
        if (!this._allowModify)
        {
            throw new Error("Config is read only");
        }
        
        if ("object" == typeof key)
        {
            for (var name in key)
            {
                this._current[name] = key[name];
            }
        }
        else
        {
            this._current[key] = val;
        }
    }
};