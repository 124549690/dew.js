/**
 * @author     LiuZhaoHui <hi.liuzhaoxin@gmail.com>
 * @link       http://www.eatbean.com/nodejs
**/

"use strict";

var LString = Dew("use", "Lang.LString");
var LDate = Dew("use", "Lang.LDate");

module.exports = Logger;

// 写入日志文件时添加前缀

function Logger (method, logPath, options)
{
    if (!(method in this._logMethod)) return;
    
    this._writer = Dew("use", this._logMethod[method], {instance : true, args : [options, logPath]});
}

Logger.prototype = 
{
    constructor : Logger, 
    __name__ : "Logger", 
    
    ERROR : 0, 
    WARN : 1, 
    NOTICE : 2, 
    DEBUG : 3, 
    
    _levels : ["ERROR", "WARN", "NOTICE", "DEBUG"], 
    _colors : [32, 34, 35, 33], 
    
    _displayErrorFormat : "[%s] \x1B[0;%dm%s\x1B[0m - \x1B[0;36m%s\x1B[0m", 
    _logDateFormat : "H:i:s", 
    
    _level : 3, 
    _displayError : true, 
    _logError : false, 
    
    _logMethod : 
    {
        file : "Common.Logger.File", 
        mongodb : "Common.Logger.Mongodb", 
        mysql : "Common.Logger.Mysql"
    }, 
    
    setLevel : function (level)
    {
        this._level = level;
        
        return this;
    }, 
    getLevel : function ()
    {
        return this._level;
    }, 
    
    setDisplayError : function (bool)
    {
        this._displayError = !!bool;
        
        return this;
    }, 
    getDisplayError : function ()
    {
        return this._displayError;
    }, 
    
    setLogError : function (bool)
    {
        this._logError = !!bool;
        
        return this;
    }, 
    getLogError : function ()
    {
        return this._logError;
    }, 
    
    _log : function (level, message)
    {
        if (isNaN(level) || (level | 0) !== level || level >= this._levels.length)
        {
            throw new Error(LString.format("level must be an integer > -1 and < %d; received %s", 
              this._levels.length, level));
        }
        
        if (undefined === this._writer)
        {
            throw new Error("No log writer specified");
        }
        
        if (this._level < level)
        {
            return;
        }
        
        if (this._displayError)
        {
            console.log(LString.format(this._displayErrorFormat, LDate.format(this._logDateFormat), // 日期 
              this._colors[level], // 颜色值
              this._levels[level], // 错误类型
              message)); // 错误信息
        }
        
        this._writer.append(LDate.format(this._logDateFormat), this._levels[level], message);
    }, 
    
    error : function (message)
    {
        this._log(this.ERROR, message);
    }, 
    
    warn : function (message)
    {
        this._log(this.WARN, message);
    }, 
    
    notice : function (message)
    {
        this._log(this.NOTICE, message);
    }, 
    
    debug : function (message)
    {
        this._log(this.DEBUG, message);
    }
};