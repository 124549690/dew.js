/**
 * @author     LiuZhaoHui <hi.liuzhaoxin@gmail.com>
 * @link       http://www.eatbean.com/nodejs
**/

"use strict";

module.exports = Async;

function Async ()
{
    this._chain = [];
}

Async.prototype = 
{
    constructor : Async, 
    __name__ : "Async", 
    
    _index : 0, 
    _length : 0, 
    
    onfinish : null, 
    
    push : function ()
    {
        var i = 0;
        var argv = arguments;
        var argc = argv.length;
        
        while (i < argc)
        {
            this._chain.push(argv[i++]);
        }
        
        this._length += argc;
        
        return this;
    }, 
    
    unshift : function ()
    {
        var i = 0;
        var argv = arguments;
        var argc = argv.length;
        
        while (i < argc)
        {
            this._chain.unshift(argv[i++]);
        }
        
        this._length += argc;
        
        return this;
    }, 
    
    set length (len)
    {
        this._chain.length = len;
        this._length = len;
        
        if (this._length <= this._index)
        {
            this._index = 0;
        }
    }, 
    
    get length ()
    {
        return this._length;
    }, 
    
    next : function ()
    {
        if (this._length === this._index)
        {
            this.onfinish && this.onfinish();
            return;
        }
        
        var item = this._chain[this._index++];
        
        if ("function" === typeof item)
        {
            item();
        }
        else if (item && "object" === typeof item)
        {
            if ("callback" in item)
            {
                if ("args" in item)
                {
                    item.callback.apply(global, item.args);
                }
                else
                {
                    item.callback();
                }
            }
            else if ("object" in item)
            {
                if ("args" in item)
                {
                    item.object[item.method].apply(item.object, item.args);
                }
                else
                {
                    item.object[item.method]();
                }
            }
            else if ("constructor" in item)
            {
                if ("args" in item)
                {
                    item.constructor.apply({__proto__ : item.constructor.prototype}, item.args);
                }
                else
                {
                    item.constructor.apply({__proto__ : item.constructor.prototype});
                }
            }
            else
            {
                throw new Error("invalid data");
            }
        }
        else
        {
            throw new Error("invalid data");
        }
    }
};