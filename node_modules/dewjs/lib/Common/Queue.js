/**
 * @author     LiuZhaoHui <hi.liuzhaoxin@gmail.com>
 * @link       http://www.eatbean.com/nodejs
**/

"use strict";

module.exports = Queue;

function Queue ()
{
		this._head = this._tail = null;
		this.length = 0;
		this.current = null;
    
    this.push.apply(this, arguments);
}

Queue.prototype = 
{
    constructor : Queue, 
    __name__ : "Queue", 
    
    push : function ()
    {
        var args = arguments;
        var i = 0, len = args.length;
        var head, tail;
        
        if (len === 0)
        {
            return this.length;
        }
        
        if (this._head === null)
        {
            head = {data: args[i++]};
            head.next = head;
            head.prev = head;
            this._head = this._tail = head;
        }
        
        for (; i < len; i++)
        {
            tail = this._tail;
            this._tail = {data: args[i], prev: tail};
            tail.next = this._tail;
        }
        
        this.current = this._tail.data;
        this.length += len;
        
        return len;
    }, 
    
    pop : function ()
    {
        if (this._tail === null) return;
        
        var data = this._tail.data;
        
        this._tail = this._tail.prev;
        this.length--;
        
        if (this.length === 0)
        {
            this._tail = this._head = null;
            this.current = null;
        }
        else
        {
            this.current = this._tail.data;
        }
        
        return data;
    }, 
    
    unshift : function ()
    {
        var argv = arguments, argc = argv.length;
        var head, tail;
        
        if (argc === 0) return this.length;
        
        this.length += argc;
        
        if (this._head === null)
        {
            head = {data: argv[--argc]};
            head.next = head;
            head.prev = head;
            this._head = this._tail = head;
        }
        
        while (--argc > -1)
        {
            head = this._head;
            this._head = {data: argv[argc], next: head};
            head.prev = this._head;
        }
        
        this.current = this._tail.data;
        
        return this.length;
    }, 
    
    shift : function ()
    {
        if (this._head === null) return;
        
        var data = this._head.data;
        this._head = this._head.next;
        
        this.length--;
        
        if (this.length === 0)
        {
            this._head = this._tail = null;
            this.current = null;
        }
        else
        {
            this.current = this._tail.data;
        }
        
        return data;
    }, 
    
    empty : function ()
    {
        this._head = this._tail = null;
        this.length = 0;
    }
};