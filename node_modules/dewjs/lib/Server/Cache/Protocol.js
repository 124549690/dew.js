/**
 * @author     LiuZhaoHui <hi.liuzhaoxin@gmail.com>
 * @link       http://www.eatbean.com/nodejs
**/

"use strict";

var Protocol = 
{
    __name__ : "Protocol", 
    
    _state : 0, 
    STATE : 
    {
        START : 0, 
        COMMAND_START : 1, 
        COMMAND : 2, 
        HANDLE : 3, 
        END : 4, 
        ERROR_START : 5, 
        ERROR : 6
    }, 
    
    _cmd : "", 
    _command : 
    {
        get : Dew("use", "Server.Cache.Protocol.Get"), 
        gets : Dew("use", "Server.Cache.Protocol.Gets"), 
        
        set : Dew("use", "Server.Cache.Protocol.Set"), 
        add : Dew("use", "Server.Cache.Protocol.Add"), 
        replace : Dew("use", "Server.Cache.Protocol.Replace"), 
        append : Dew("use", "Server.Cache.Protocol.Append"), 
        prepend : Dew("use", "Server.Cache.Protocol.Prepend"), 
        cas : Dew("use", "Server.Cache.Protocol.Cas"), 
        
        "delete" : Dew("use", "Server.Cache.Protocol.Delete"), 
        
        incr : Dew("use", "Server.Cache.Protocol.Incr"), 
        decr : Dew("use", "Server.Cache.Protocol.Decr"), 
        touch : Dew("use", "Server.Cache.Protocol.Touch"), 
        
        stats : Dew("use", "Server.Cache.Protocol.Stats"), 
        flush_all : Dew("use", "Server.Cache.Protocol.FlushAll"), 
        version : Dew("use", "Server.Cache.Protocol.Version"), 
        quit : Dew("use", "Server.Cache.Protocol.Quit")
    }, 
    
    RETURN_STATE : 
    {
        ERROR : -1, 
        PART : 0, 
        COMPLETE : 1
    }, 
    
    initialize : function (socket)
    {
        var obj = {__proto__ : this, _socket : socket};
        socket.on("data", this.run.bind(obj));
    }, 
    
    run : function (chunk)
    {
        var S = this.STATE;
        var i = 0, len = chunk.length;
        var c, index = i;
        
        for (; i < len; i++)
        {
            c = chunk[i];
            
            switch (this._state)
            {
                case S.START : 
                  // space
                  if (c === 0x20)
                  {
                      break;
                  }
                  
                  this._state = S.COMMAND_START;
                  
                case S.COMMAND_START : 
                  // \r or \n or \0
                  if (c === 0x0D || c === 0x0A || c === 0x00)
                  {
                      this._state = S.ERROR_START;
                      break;
                  }
                  
                  index = i;
                  this._state = S.COMMAND;
                  
                // get name age[\r]\n
                // version[\r]\n
                case S.COMMAND : 
                  // space or \r or \n
                  if (c !== 0x20 && c !== 0x0D && c !== 0x0A)
                  {
                      break;
                  }
                  
                  this._cmd += chunk.toString("utf8", index, i);
                  
                  if (this._cmd in this._command)
                  {
                      this._state = S.HANDLE;
                      this._handler = new this._command[this._cmd](this._socket);
                  }
                  else
                  {
                      this._state = S.ERROR_START;
                      break;
                  }
                  
                case S.HANDLE : 
                  c = this._handler.parse(chunk, i, len);
                  
                  if (c === this.RETURN_STATE.PART)
                  {
                      return;
                  }
                  
                  i = this._handler.index - 1;
                  
                  if (c === this.RETURN_STATE.COMPLETE) // [\r]\n
                  {
                      this._state = S.END;
                  }
                  else if (c === this.RETURN_STATE.ERROR)
                  {
                      this._state = S.ERROR_START;
                  }
                  
                  break;
                  
                case S.END : 
                  // \r or \n
                  if (c === 0x0D || c === 0x0A)
                  {
                      break;
                  }
                  
                  i--;
                  this._cmd = "";
                  this._handler = null;
                  this._state = S.START;
                  break;
                  
                case S.ERROR_START : 
                  // \r, \n
                  if (c !== 0x0D && c !== 0x0A)
                  {
                      break;
                  }
                  
                  this._state = S.ERROR;
                  
                case S.ERROR : 
                  // \r, \n
                  if (c === 0x0D || c === 0x0A)
                  {
                      break;
                  }
                  
                  i--;
                  this._cmd = "";
                  this._handler = null;
                  this._state = S.START;
                  this._socket.write("ERROR\r\n");
            }
        }
        
        if (this._state === S.START)
        {
            this._cmd += chunk.toString("utf8", index);
        }
    }
};

module.exports = Protocol;