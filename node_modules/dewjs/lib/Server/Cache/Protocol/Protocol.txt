键值中不能使用制表符和其他空白字符（例如空格，换行等），键值当前的长度限制设定为250字符
----------------------------------------------------------------------------------------
存储命令: "set", "add", "replace", "append", "prepend" and "cas"
取回命令: "get" and "gets"

以一行 "END" 结束命令
----------------------------------------------------------------------------------------

错误字串

- "ERROR\r\n"
意味着客户端发送了不存在的命令名称。

- "CLIENT_ERROR <error>\r\n"
意味着输入的命令行里存在一些客户端错误，例如输入未遵循协议。<error>部分是人类易于理解的错误解说……


- "SERVER_ERROR <error>\r\n"
意味着一些服务器错误，导致命令无法执行。<error>部分是人类易于理解的错误解说。在一些严重的情形下（通常应该不会遇到），服务器将在发送这行错误后关闭连接。这是服务器主动关闭连接的唯一情况。
----------------------------------------------------------------------------------------

存储命令

首先，客户端会发送一行像这样的命令：
<command name> <key> <flags> <exptime> <bytes> [noreply]\r\n
cas <key> <flags> <exptime> <bytes> <cas unique> [noreply]\r\n
cas 检查并存储(Check And Set)或者比较并更新(Compare And Swap)。
    如果从上次读取到现在没有更新，那么存入数据，处理更新竞争很有用。

- <command name> 是 "set", "add", "replace", "append" or "prepend"
set 意思是 "储存此数据" 
add 意思是 "储存此数据，只在服务器*未*保留此键值的数据时" 
replace 意思是 "储存此数据，只在服务器*曾*保留此键值的数据时"
append 意思是 "储存此数据，只在服务器已存在此键值的数据时在原值后添加"
prepend 意思是 "储存此数据，只在服务器已存在此键值的数据时在原值前添加"

- <key> 是接下来的客户端所要求储存的数据的键值
- <flags> 是在取回内容时，与数据和发送块一同保存服务器上的任意16位无符号整形（用十进制来书写）。
          客户端可以用它作为"位域"来存储一些特定的信息；它对服务器是不透明的。
- <exptime> 是终止时间。如果为0，该项永不过期(虽然它可能被删除，以便为其他缓存项目腾出位置)。
            如果非0（Unix时间戳或当前时刻的秒偏移），到达终止时间后，客户端无法再获得这项内容。
- <bytes> 是随后的数据区块的字节长度，不包括用于分野的"\r\n"。它可以是0（这时后面跟随一个空的数据区块）。
- <cas unique> is a unique 64-bit value of an existing entry.
  Clients should use the value returned from the "gets" command
  when issuing "cas" updates.

- [noreply]

在这一行以后，客户端发送数据区块。
<data block>\r\n
- <data block> 是大段的8位数据，其长度由前面的命令行中的<bytes>指定。

发送命令行和数据区块以后，客户端等待回复，可能的回复如下：
- "STORED\r\n" 表明成功.
- "NOT_STORED\r\n" 表明数据没有被存储，但不是因为发生错误。这通常意味着add 或 replace命令的条件不成立，
                   或者，项目已经位列删除队列（参考后文的"delete"命令）。
- "EXISTS\r\n" 表明数据尝试存储，但由于 "cas" 命令已经被修改。
- "NOT_FOUND\r\n" 表明数据尝试存储，但由于 "cas" 命令并不存在。
----------------------------------------------------------------------------------------

取回命令

一行取回命令如下：
get <key>*\r\n
gets <key>*\r\n

- <key>* 表示一个或多个键值，由空格隔开的字串
这行命令以后，客户端的等待0个或多个项目，每项都会收到一行文本，
然后跟着数据区块。所有项目传送完毕后，服务器发送以下字串：
"END\r\n"
来指示回应完毕。

服务器用以下形式发送每项内容：
VALUE <key> <flags> <bytes> [<cas unique>]\r\n
<data block>\r\n

- <key> 是所发送的键名
- <flags> 是存储命令所设置的记号
- <bytes> 是随后数据块的长度，*不包括* 它的界定符"\r\n"
- <data block> 是发送的数据
- <cas unique> is a unique 64-bit integer that uniquely identifies
  this specific item.

如果在取回请求中发送了一些键名，而服务器没有送回项目列表，
这意味着服务器没这些键名（可能因为它们从未被存储，
或者为给其他内容腾出空间而被删除，或者到期，或者被已客户端删除）。
----------------------------------------------------------------------------------------

删除

命令"delete"允许从外部删除内容：
delete <key> [noreply]\r\n
- <key> 是客户端希望服务器删除的内容的键名
- noreply 发送此字符串，服务器不给予回复

此命令有一行回应：
- "DELETED\r\n"
表示执行成功
- "NOT_FOUND\r\n"
表示没有找到这项内容
参考随后的"flush_all"命令使所有内容无效
----------------------------------------------------------------------------------------

增加/减少

命令 "incr" 和 "decr"被用来修改数据，当一些内容需要 替换、增加 或减少时。
这些数据必须是十进制的32位无符号整新。如果不是，则当作0来处理。修改的内容必须存在，
当使用"incr"/"decr"命令修改不存在的内容时，不会被当作0处理，而是操作失败。

客户端发送命令行：
incr <key> <value> [noreply]\r\n
或
decr <key> <value> [noreply]\r\n

- <key> 是客户端希望修改的内容的建名
- <value> 是客户端要增加/减少的总数
- noreply 发送此字符串，服务器不给予回复

回复为以下集中情形：
- "NOT_FOUND\r\n" 指示该项内容的值，不存在。

- <value>\r\n ，<value>是 增加/减少 。

注意"decr"命令发生下溢：如果客户端尝试减少的结果小于0时，
结果会是0。"incr" 命令不会发生溢出。
----------------------------------------------------------------------------------------

Touch

The "touch" command is used to update the expiration time of an existing item
without fetching it.

touch <key> <exptime> [noreply]\r\n

- <key> is the key of the item the client wishes the server to delete

- <exptime> is expiration time. Works the same as with the update commands
  (set/add/etc). This replaces the existing expiration time. If an existing
  item were to expire in 10 seconds, but then was touched with an
  expiration time of "20", the item would then expire in 20 seconds.

- "noreply" optional parameter instructs the server to not send the
  reply.  See the note in Storage commands regarding malformed
  requests.

The response line to this command can be one of:

- "TOUCHED\r\n" to indicate success

- "NOT_FOUND\r\n" to indicate that the item with this key was not
  found.
----------------------------------------------------------------------------------------

状态

命令"stats" 被用于查询服务器的运行状态和其他内部数据。有两种格式。不带参数的：

stats\r\n

这会在随后输出各项状态、设定值和文档。另一种格式带有一些参数：

stats <args>\r\n

通过<args>，服务器传回各种内部数据。因为随时可能发生变动，本文不提供参数的种类及其传回数据。

----------------------------------------------------------------------------------------

各种状态

受到无参数的"stats"命令后，服务器发送多行内容，如下：

STAT <name> <value>\r\n

服务器用以下一行来终止这个清单：

END\r\n

在每行状态中，<name> 是状态的名字，<value> 使状态的数据。 
以下清单，是所有的状态名称，数据类型，和数据代表的含义。

在"类型"一列中，"32u"表示32位无符号整型，"64u"表示64位无符号整型，
"32u:32u"表示用冒号隔开的两个32位无符号整型。

名称/Name         类型/Type 
pid               32u      服务器进程ID 
uptime            32u      服务器运行时间，单位秒 
time              32u      服务器当前的UNIX时间
version           string   服务器的版本号
bytes             64u      服务器当前存储内容所占用的字节数
curr_connections  32u      连接数量 
----------------------------------------------------------------------------------------

"flush_all" 

命令有一个可选的数字参数。它总是执行成功，服务器会发送"OK\r\n"回应。
它的效果是使已经存在的项目立即失效（缺省），或在指定的时间后。
此后执行取回命令，将不会有任何内容返回（除非重新存储同样的键名）。
flush_all 实际上没有立即释放项目所占用的内存，而是在随后陆续有新的项目被储存时执行。
flush_all 效果具体如下：它导致所有更新时间早于flush_all所设定时间的项目，
在被执行取回命令时命令被忽略。

“version”命令没有参数：

version\r\n
在回应中，服务器发送：
"VERSION <version>\r\n"
<version> 是服务器的版本字串。

“quit”命令没有参数：
quit\r\n
接收此命令后，服务器关闭连接。不过，客户端可以在不再需要时，简单地关闭连接就行，并不一定需要发送这个命令。
