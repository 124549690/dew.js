/**
 * @author     LiuZhaoHui <hi.liuzhaoxin@gmail.com>
 * @link       http://www.eatbean.com/nodejs
**/

"use strict";

module.exports = Incr;

var Data = Dew("use", "Server.Cache.Data");

function Incr (socket)
{
    this._socket = socket;
}

Incr.prototype = 
{
    constructor : Incr, 
    
    _mark : 0, 
    
    _state : 0, 
    STATE : 
    {
        START : 0, 
        FILED_START : 1, 
        FILED : 2, 
        END : 5, 
        ERROR : 6
    }, 
    
    RETURN_STATE : 
    {
        ERROR : -1, 
        PART : 0, 
        COMPLETE : 1
    }, 
    
    parse : function (chunk, i, len)
    {
        var c, index = i, S = this.STATE;
        
        for (; i < len; i++)
        {
            c = chunk[i];
            
            switch (this._state)
            {
                case S.START : 
                  // space
                  if (c === 0x20)
                  {
                      break;
                  }
                  
                  this._state = S.FILED_START;
                  
                case S.FILED_START : 
                  // space
                  if (c === 0x20)
                  {
                      break;
                  }
                  
                  index = i;
                  this._field = "";
                  this._state = S.FILED;
                  
                case S.FILED : 
                  // \r or \n
                  if (c === 0x0D || c === 0x0A)
                  {
                      this._state = S.END;
                      
                      // incr num 1 \n
                      if (index === i)
                      {
                          i--;
                          break;
                      }
                  }
                  // space
                  else if (c === 0x20)
                  {
                      this._state = S.FILED_START;
                  }
                  else
                  {
                      break;
                  }
                  
                  // incr <key> <value> [noreply]\r\n
                  
                  this._field += chunk.toString("utf8", index, i);
                  
                  // <key>
                  if (this._mark === 0)
                  {
                      this._key = this._field;
                  }
                  // <value>
                  else if (this._mark === 1)
                  {
                      this._value = this._field | 0;
                  }
                  // [noreply]
                  else if (this._mark === 2)
                  {
                      if ("noreply" === this._field)
                      {
                          this._isNoreply = true;
                      }
                  }
                  else
                  {
                      i--;
                      this._state = S.ERROR;
                      break;
                  }
                  
                  // \n
                  if (c === 0x0A)
                  {
                      i--;
                  }
                  else
                  {
                      this._mark++;
                  }
                  
                  break;
                  
                case S.END : 
                  c = Data.incr(this._key, this._value, this._socket);
                  
                  if (!("_isNoreply" in this))
                  {
                      if (c === Data.STATE.NOT_FOUND)
                      {
                          this._socket.write("NOT_FOUND\r\n");
                      }
                  }
                  
                  this.index = i;
                  return this.RETURN_STATE.COMPLETE;
                  
                case S.ERROR : 
                  this.index = i;
                  this._socket.write("CLIENT_ERROR bad data chunk\r\n");
                  return this.RETURN_STATE.ERROR;
            }
        }
        
        if (this._state === S.FILED)
        {
            this._field += chunk.toString("utf8", index);
        }
        
        return this.RETURN_STATE.PART;
    }
};