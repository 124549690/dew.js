/**
 * @author     LiuZhaoHui <hi.liuzhaoxin@gmail.com>
 * @link       http://www.eatbean.com/nodejs
**/

"use strict";

module.exports = Gets;

var Data = Dew("use", "Server.Cache.Data");

function Gets (socket)
{
    this._socket = socket;
}

Gets.prototype = 
{
    constructor : Gets, 
    
    _key : "", 
    
    _state : 0, 
    STATE : 
    {
        START : 0, 
        FILED_START : 1, 
        FILED : 2, 
        END : 3, 
        ERROR : 4
    }, 
    
    RETURN_STATE : 
    {
        ERROR : -1, 
        PART : 0, 
        COMPLETE : 1
    }, 
    
    parse : function (chunk, i, len)
    {
        var c, store;
        var index = i, S = this.STATE;
        
        for (; i < len; i++)
        {
            c = chunk[i];
            
            // get name age[\r]\n
            switch (this._state)
            {
                case S.START : 
                  // space
                  if (c === 0x20)
                  {
                      break;
                  }
                  
                  // \r or \n or \0
                  if (c === 0x0D || c === 0x0A || c === 0x00)
                  {
                      i--;
                      this._state = S.ERROR;
                      break;
                  }
                  
                  this._state = S.FILED_START;
                  
                case S.FILED_START : 
                  // space
                  if (c === 0x20)
                  {
                      break;
                  }
                  
                  index = i;
                  this._state = S.FILED;
                
                case S.FILED : 
                  // \r or \n
                  if (c === 0x0D || c === 0x0A)
                  {
                      this._state = S.END;
                      
                      if (index === i || index + 1 === len)
                      {
                          i--;
                          break;
                      }
                  }
                  // space
                  else if (c === 0x20)
                  {
                      this._state = S.FILED_START;
                  }
                  else
                  {
                      break;
                  }
                  
                  this._key += chunk.toString("utf8", index, i);
                  
                  store = Data.get(this._key);
                  if (store)
                  {
                      // VALUE <key> <flags> <bytes> <cas unique>\r\n<data block>\r\n
                      this._socket.write("VALUE " + this._key + " " + store.flags + 
                        " " + store.bytes + " " + store.cas + "\r\n" + store.value + "\r\n");
                  }
                  
                  //console.log("|" + this._key + "|");
                  
                  this._key = "";
                  break;
                  
                case S.END : 
                  this.index = i;
                  this._socket.write("END\r\n");
                  return this.RETURN_STATE.COMPLETE;
                  
                case S.ERROR : 
                  this.index = i;
                  return this.RETURN_STATE.ERROR;
            }
        }
        
        if (this._state === S.FILED)
        {
            this._key += chunk.toString("utf8", index);
        }
        
        return this.RETURN_STATE.PART;
    }
};