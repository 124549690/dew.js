/**
 * @author     LiuZhaoHui <hi.liuzhaoxin@gmail.com>
 * @link       http://www.eatbean.com/nodejs
**/

"use strict";

function sweep ()
{
    var store = Data._store;
    var now = +new Date();
    var key, item;
    
    for (key in store)
    {
        item = store[key];
        
        if (item.millisecond && item.exptime < now)
        {
            Data._count--;
            Data._nowBytes -= item.bytes;
            delete store[key];
        }
    }
}

var Data = 
{
    __name__ : "Data", 
    
    _store : {}, 
    _count : 0, 
    _nowBytes : 0, 
    
    _uptime : +new Date(), 
    
    _detail : 
    {
        pid : process.pid, 
        
        get curr_items ()
        {
            return Data._count;
        }, 
        
        get bytes ()
        {
            return Data._nowBytes;
        }
    }, 
    
    STATE : 
    {
        STORED : 0, 
        EXISTS : 1, 
        NOT_STORED : 2, 
        NOT_FOUND : 3, 
        DELETED : 4, 
        DONE : 5, 
        TOUCHED : 6
    }, 
    
    initializer : function (application)
    {
        application.useSection("cache");
        this._maxBytes = application.get("max_bytes");
        
        setInterval(sweep, 3 * 60 * 1000);
    }, 
    
    // get <key>*[\r]\n
    // gets <key>*[\r]\n
    get : function (key)
    {
        return key in this._store ? this._store[key] : null;
    }, 
    
    // set <key> <flags> <exptime> <bytes> [noreply]\r\n<value>[\r]\n
    set : function (key, value, flags, exptime, bytes)
    {
        if (this._nowBytes > this._maxBytes)
        {
            return this.STATE.NOT_STORED;
        }
        
        exptime *= 1000;
        this._nowBytes += bytes;
        
        var now = +new Date();
        
        if (key in this._store)
        {
            var data = this._store[key];
            
            data.cas++;
            data.value = value;
            data.flags = flags;
            data.bytes = bytes;
            data.exptime = now + exptime;
            data.millisecond = exptime;
            
            this._nowBytes -= data.bytes;
        }
        else
        {
            this._count++;
            
            this._store[key] = 
            {
                value : value, 
                flags : flags, 
                bytes : bytes, 
                cas : 1, 
                exptime : now + exptime, 
                millisecond : exptime
            };
        }
        
        return this.STATE.STORED;
    }, 
    
    // replace <key> <flags> <exptime> <bytes> [noreply]\r\n<value>[\r]\n
    replace : function (key, value, flags, exptime, bytes)
    {
        if (!(key in this._store) || this._nowBytes > this._maxBytes)
        {
            return this.STATE.NOT_STORED;
        }
        
        exptime *= 1000;
        this._nowBytes = this._nowBytes - data.bytes + bytes;
        
        data.cas++;
        data.value = value;
        data.flags = flags;
        data.bytes += bytes;
        data.exptime = +new Date() + exptime;
        data.millisecond = exptime;
        
        return this.STATE.STORED;
    }, 
    
    // cas <key> <flags> <exptime> <bytes> <cas unique> [noreply][\r]\n
    cas : function (key, value, flags, exptime, bytes, cas)
    {
        if (!(key in this._store) || this._nowBytes > this._maxBytes)
        {
            return this.STATE.NOT_FOUND;
        }
        
        var data = this._store[key];
        var now = +new Date();
        
        if (data.millisecond && data.exptime < now)
        {
            this._count--;
            delete this._store[key];
            this._nowBytes -= data.bytes;
            return this.STATE.NOT_STORED;
        }
        
        if (data.cas !== cas)
        {
            return this.STATE.EXISTS;
        }
        
        exptime *= 1000;
        this._nowBytes = this._nowBytes - data.bytes + bytes;
        
        data.cas++;
        data.value = value + data.value;
        data.flags = flags;
        data.bytes = bytes;
        data.exptime = now + exptime;
        data.millisecond = exptime;
        
        return this.STATE.STORED;
    }, 
    
    // add <key> <flags> <exptime> <bytes> [noreply]\r\n<value>[\r]\n
    add : function (key, value, flags, exptime, bytes)
    {
        if (key in this._store || this._nowBytes > this._maxBytes)
        {
            return this.STATE.NOT_STORED;
        }
        
        exptime *= 1000;
        this._count++;
        this._store[key] = 
        {
            value : value, 
            flags : flags, 
            bytes : bytes, 
            cas : 1, 
            exptime : new Date() + exptime, 
            millisecond : exptime
        };
        
        this._nowBytes += bytes;
        return this.STATE.STORED;
    }, 
    
    // append <key> <flags> <exptime> <bytes> [noreply]\r\n<value>[\r]\n
    append : function (key, value, flags, exptime, bytes)
    {
        if (!(key in this._store) || this._nowBytes > this._maxBytes)
        {
            return this.STATE.NOT_STORED;
        }
        
        var data = this._store[key];
        var now = +new Date();
        
        if (data.millisecond && data.exptime < now)
        {
            this._count--;
            delete this._store[key];
            this._nowBytes -= data.bytes;
            return this.STATE.NOT_STORED;
        }
        
        exptime *= 1000;
        data.cas++;
        data.value += value;
        data.flags = flags;
        data.bytes += bytes;
        data.exptime = now + exptime;
        data.millisecond = exptime;
        
        this._nowBytes += bytes;
        return this.STATE.STORED;
    }, 
    
    // prepend <key> <flags> <exptime> <bytes> [noreply]\r\n<value>[\r]\n
    prepend : function (key, value, flags, exptime, bytes)
    {
        if (!(key in this._store) || this._nowBytes > this._maxBytes)
        {
            return this.STATE.NOT_STORED;
        }
        
        var data = this._store[key];
        var now = +new Date();
        
        if (data.millisecond && data.exptime < now)
        {
            this._count--;
            delete this._store[key];
            this._nowBytes -= data.bytes;
            return this.STATE.NOT_STORED;
        }
        
        exptime *= 1000;
        data.cas++;
        data.value = value + data.value;
        data.flags = flags;
        data.bytes += bytes;
        data.exptime = now + exptime;
        data.millisecond = exptime;
        
        this._nowBytes += bytes;
        return this.STATE.STORED;
    }, 
    
    // delete <key> [noreply]\r\n
    del : function (key)
    {
        if (key in this._store)
        {
            this._count--;
            this._nowBytes -= this._store[key].bytes;
            delete this._store[key];
            return this.STATE.DELETED;
        }
        
        return this.STATE.NOT_FOUND;
    }, 
    
    // incr <key> <value> [noreply]\r\n
    incr : function (key, value, socket)
    {
        if (!(key in this._store))
        {
            return this.STATE.NOT_FOUND;
        }
        
        var data = this._store[key];
        var now = +new Date();
        
        if (data.millisecond && data.exptime < now)
        {
            this._count--;
            delete this._store[key];
            this._nowBytes -= data.bytes;
            return this.STATE.NOT_FOUND;
        }
        
        this._nowBytes -= data.bytes;
        
        data.value = (data.value | 0) + value;
        data.exptime = now + data.millisecond;
        
        var i = 1, v = data.value;
        while (v = v / 10 | 0) i++;
        
        data.bytes = i;
        this._nowBytes += i;
        
        socket.write(data.value + "\r\n");
        return this.STATE.DONE;
    }, 
    
    // decr <key> <value> [noreply]\r\n
    decr : function (key, value, socket)
    {
        if (!(key in this._store))
        {
            return this.STATE.NOT_FOUND;
        }
        
        var data = this._store[key];
        var now = +new Date();
        
        if (data.millisecond && data.exptime < now)
        {
            this._count--;
            delete this._store[key];
            this._nowBytes -= data.bytes;
            return this.STATE.NOT_FOUND;
        }
        
        this._nowBytes -= data.bytes;
        
        data.value = Math.max((data.value | 0) - value, 0);
        data.exptime = now + data.millisecond;
        
        var i = 1, v = data.value;
        while (v = v / 10 | 0) i++;
        
        // <value>\r\n
        socket.write(data.value + "\r\n");
        return this.STATE.DONE;
    }, 
    
    // touch <key> <exptime> [noreply]\r\n
    touch : function (key, exptime)
    {
        if (!(key in this._store))
        {
            return this.STATE.NOT_FOUND;
        }
        
        var data = this._store[key];
        var now = +new Date();
        
        if (data.millisecond && data.exptime < now)
        {
            this._count--;
            delete this._store[key];
            this._nowBytes -= data.bytes;
            return this.STATE.NOT_FOUND;
        }
        
        exptime *= 1000;
        data.exptime = now + exptime;
        data.millisecond = exptime;
        
        return this.STATE.TOUCHED;
    }, 
    
    // stats\r\n
    stats : function (socket)
    {
        var detail = this._detail, key;
        
        for (key in detail)
        {
            socket.write("STAT " + key + " " + detail[key] + "\r\n");
        }
        
        socket.write("END\r\n");
    }, 
    
    // flush_all\r\n
    flushAll : function ()
    {
        sweep();
    }
};

module.exports = Data;