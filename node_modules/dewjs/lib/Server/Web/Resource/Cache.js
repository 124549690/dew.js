/**
 * @author     LiuZhaoHui <hi.liuzhaoxin@gmail.com>
 * @link       http://www.eatbean.com/nodejs
**/

"use strict";

var Cache = 
{
    __name__ : "Cache", 
    
    initialize : function (application)
    {
        if (!application.hasSection("resource")
          || !Array.isArray(application.useSection("resource").current))
        {
            this.match = new Function ("return null");
            return;
        }
        
        var resource = application.current;
        var i = 0, len = resource.length;
        var item, index, offset, prev, next, c;
        
        this._resources = {};
        
        for (; i < len; i++)
        {
            item = resource[i];
            
            index = 1;
            offset = 0;
            
            c = "*";
            next = this._resources;
            prev = this._resources;
            
            do
            {
                offset = item.url.indexOf("/", index);
                
                if (!~offset)
                {
                    if (index !== item.url.length)
                    {
                        c = item.url.slice(index);
                        next[c] = {"*" : item};
                    }
                    else if (!!c.length)
                    {
                        prev[c] = {"*" : item};
                    }
                    
                    if ("allow" in item)
                    {
                        if (~item.allow.indexOf("cache"))
                        {
                            item.cache = {};
                        }
                        
                        if (~item.allow.indexOf("compress"))
                        {
                            item.isCompress = true;
                            
                            if ("headers" in item)
                            {
                                item.headers["Content-Encoding"] = "gzip";
                            }
                            else
                            {
                                item.headers = {"Content-Encoding" : "gzip"}
                            }
                        }
                        else
                        {
                            item.isCompress = false;
                        }
                    }
                    
                    break;
                }
                
                c = item.url.slice(index, offset);
                
                if ("*" in next)
                {
                    break;
                }
                
                prev = next;
                
                if (c in next)
                {
                    next = next[c];
                    
                    if ("*" in next)
                    {
                        break;
                    }
                }
                else
                {
                    next = next[c] = {};
                }
                
                index = offset + 1;
            } while (true);
        }
    }, 
    
    match : function (dir, suffix)
    {
        var ref = this._resources, index = 1, offset, c = "*";
        
        do
        {
            offset = dir.indexOf("/", index);
            
            if (!~offset)
            {
                if (index !== dir.length)
                {
                    c = dir.slice(index);
                }
                
                if (c in ref)
                {
                    ref = ref[c];
                    
                    if ("*" in ref)
                    {
                        ref = ref["*"];
                        
                        if ("suffix" in ref)
                        {
                           if (~ref.suffix.indexOf(suffix))
                           {
                              return ref;
                           }
                        }
                        else
                        {
                            return ref;
                        }
                    }
                }
                
                return null;
            }
            
            c = dir.slice(index, offset);
            
            if (c in ref)
            {
                if ("*" in ref[c])
                {
                    ref = ref[c]["*"];
                    
                    if ("suffix" in ref)
                    {
                       if (~ref.suffix.indexOf(suffix))
                       {
                          return ref;
                       }
                    }
                    else
                    {
                        return ref;
                    }
                    
                    return null;
                }
            }
            else
            {
                return null;
            }
            
            ref = ref[c];
            index = offset + 1;
        } while (true);
        
        return null;
    }
};

module.exports = Cache;