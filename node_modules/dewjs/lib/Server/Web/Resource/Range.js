/**
 * @author     LiuZhaoHui <hi.liuzhaoxin@gmail.com>
 * @link       http://www.eatbean.com/nodejs
**/

"use strict";

var Range = 
{
    __name__ : "Range", 
    
    parseRange : function (range, fileSize)
    {
        var offset = range.indexOf("="), length = range.length;
        
        if (!~offset || ++offset === length /* || !~range.indexOf("bytes") */)
        {
            return {isRange : false};
        }
        
        var c = range[offset].charCodeAt(), index, left, right;
        
        // fileSize = 1234
        // Range: bytes=-500
        // (fileSize - 500)-(fileSize - 1)/fileSize
        // Content-Range: bytes 734-1233/1234
        if (c === 0x2D) // -
        {
            index = ++offset;
            
            while (index < length)
            {
                c = range[index++].charCodeAt();
                
                // 0 - 9
                // if (!(c >= 0x30 && c <= 0x39))
                if (0x30 > c || c > 0x39)
                {
                    return {isRange : false};
                }
            }
            
            // 防止 Range: bytes=-发生
            if (offset === index)
            {
                return {isRange : false};
            }
            
            left = range.slice(offset, index) | 0;
            
            if (left > fileSize)
            {
                return {isRange : false};
            }
            
            return {isRange : true, start : fileSize - left, end : fileSize - 1};
        }
        else if (c > 0x2f && c < 0x3A) // 0 - 9
        {
            index = offset;
            
            while (++index < length)
            {
                c = range[index].charCodeAt();
                
                // -
                if (c === 0x2D)
                {
                    break;
                }
                // 0 - 9
                // if (!(c >= 0x30 && c <= 0x39))
                else if (0x30 > c || c > 0x39)
                {
                    return {isRange : false};
                }
            }
            
            // 防止 Range: bytes=500 发生
            if (index === length)
            {
                return {isRange : false};
            }
            
            left = range.slice(offset, index) | 0;
            
            if (left > fileSize)
            {
                return {isRange : false};
            }
            
            // fileSize = 1234
            // Range: bytes=500-
            // 500-(fileSize - 1)/fileSize
            // Content-Range: bytes 500-1233/1234
            if (++index === length)
            {
                return {isRange : true, start : left, end : fileSize - 1};
            }
            
            offset = index;
            
            for (; index < length; index++)
            {
                c = range[index].charCodeAt();
                
                // ,
                if (c === 0x2C)
                {
                    break;
                }
                // 0 - 9
                // if (!(c >= 0x30 && c <= 0x39))
                else if (0x30 > c || c > 0x39)
                {
                    return {isRange : false};
                }
            }
            
            // 防止 "Range: bytes=500-," 发生
            if (index === offset)
            {
                return {isRange : false};
            }
            
            right = range.slice(offset, index) | 0;
            
            if (right > fileSize || left > right)
            {
                return {isRange : false};
            }
            
            // fileSize = 1234
            // Range: bytes=500-999
            // Content-Range: bytes 500-999/1234
            if (index === length)
            {
                return {isRange : true, start : left, end : right};
            }
            
            // 防止 "Range: bytes=500-999," 发生
            if (++index === length)
            {
                return {isRange : false};
            }
            
            c = range[index].charCodeAt();
            
            // fileSize = 1234
            // Range: bytes=0-0,-1
            // Content-Range: bytes 0-1233/1234
            if (c === 0x2D) // -
            {
                offset = ++index;
                
                for (; index < length; index++)
                {
                    c = range[index].charCodeAt();
                    
                    // 0 - 9
                    // if (!(c >= 0x30 && c <= 0x39))
                    if (0x30 > c || c > 0x39)
                    {
                        return {isRange : false};
                    }
                }
                
                // 防止 "Range: bytes=0-0,-" 发生
                if (index === offset)
                {
                    return {isRange : false};
                }
                
                c = fileSize - range.slice(offset);
                
                // 防止 "Range: bytes=0-0,-0" 发生
                if (c >= fileSize || c < right + 1)
                {
                    return {isRange : false};
                }
                
                return {isRange : true, start : left, end : c};
            }
            // fileSize = 1234
            // Range: bytes=500-600,601-999 or Range: bytes=500-700,601-999
            // Content-Range: bytes 500-999/1234
            else if (c > 0x2f && c < 0x3A) // 0 - 9
            {
                offset = index;
                
                while (++index < length)
                {
                    c = range[index].charCodeAt();
                    
                    // -
                    if (c === 0x2D)
                    {
                        c = left;
                        left = range.slice(offset, index) | 0;
                        
                        if (left > right + 1)
                        {
                            return {isRange : false};
                        }
                        
                        right = left;
                        left = c;
                        
                        offset = index + 1;
                    }
                    // ,
                    else if (c === 0x2C)
                    {
                        c = right;
                        right = range.slice(offset, index) | 0;
                        
                        if (c > right)
                        {
                            return {isRange : false};
                        }
                        
                        offset = index + 1;
                    }
                    // 0 - 9
                    // if (!(c >= 0x30 && c <= 0x39))
                    else if (0x30 > c || c > 0x39)
                    {
                        return {isRange : false};
                    }
                }
                
                if (0x30 > c || c > 0x39)
                {
                    return {isRange : false};
                }
                
                c = right;
                right = range.slice(offset, index) | 0;
                
                if (c > right || right > fileSize - 1)
                {
                    return {isRange : false};
                }
                
                return {isRange : true, start : left, end : right};
            }
            else
            {
                return {isRange : false};
            }
        }
        else
        {
            return {isRange : false};
        }
    }
};

module.exports = Range;