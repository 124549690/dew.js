/**
 * @author     LiuZhaoHui <hi.liuzhaoxin@gmail.com>
 * @link       http://www.eatbean.com/nodejs
**/

"use strict";

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// http://rickharrison.github.com/validate.js
// reference "validate.js" file section content
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

var LString = Dew("use", "Lang.LString");

var Validate = 
{
    __name__ : "Validate", 
    
    _message : 
    {
        // 此字段是必填
        required : "This field is required.", 
        
        // 此字段长度至少 %d 个字符
        min_length : "This field must be at least %d characters in length.", 
        // 此字段长度不超过 %d 个字符
        max_length : "This field must not exceed %d characters in length.", 
        // 此字段长度为 %d 个字符
        exact_length : "This field must be exactly %d characters in length.", 
        
        // 此字段数值必须小于或等于 %d
        min_value : "This field must contain a number less than or equal to %d.", 
        // 此字段数值必须大于或等于 %d
        max_value : "This field must contain a number greater than or equal to %d.", 
        // 此字段只能是数字
        numeric : "This field must contain only numbers.", 
        // 此字段只能是整数
        integer : "This field must contain an integer.", 
        
        // 此字段与 %s 字段不相等
        matches : "This field does not match the %s field.", 
        
        // 此字段只能包含字母
        alpha : "This field must only contain alphabetical characters.", 
        // 此字段只能包含字母和数字
        alpha_numeric : "This field must only contain alpha-numeric characters.", 
        // 此字段只能包含字母数字、下划线和连接符
        alpha_dash : "This field must only contain alpha-numeric characters, underscores, and dashes.", 
        
        // 此字段必须包含在 %s 枚举列表中
        inclusion : "This field value must be included in the %s enumeration list.", 
        
        // 此字段不包含在 %s 枚举列表中
        exclusion : "This field value should be excluded in the %s enumeration list.", 
        
        // 此字段格式错误
        format : "This field format error.", 
        
        // 此字段必须是一个有效电子的邮件地址
        email : "This field must contain a valid email address.", 
        // 此字段必须是一个有效网址
        url : "This field must contain a valid URL.", 
        // 此字段必须是一个有效 IP 地址
        ip : "This field must contain a valid IP.", 
        // 此字段必须是一个有效 base64 字符串
        base64 : "This field must contain a base64 string.", 
        
        // 此字段必须是一个有效的信用卡号码 
        credit_card : "This field must contain a vaild credit card number"
    }, 
    
    _regexRule : 
    {
        alpha : new RegExp("^[a-zA-Z]+$"), 
        alphaNumeric : new RegExp("^[a-zA-Z0-9]+$"), 
        alphaDash : new RegExp("^[\\w-]+$"), 
        
        email : new RegExp("^[a-zA-Z\\d.!#$%&amp;'*+-/=?\\^_`{|}~-]+@[a-zA-Z\\d-]+(?:\\.[a-zA-Z\\d-]+)*$"), 
        url : new RegExp("^(?:ftp|https?):\\/\\/[\\w\\-_]+(?:\\.[\\w\\-_]+)+(?:[\\w\\-\\.,@?^=%&amp;:/~\\+#]*[\\w\\-\\@?^=%&amp;/~\\+#])?$"), 
        ip : new RegExp("^(?:(?:\\d|[01]?\\d\\d|2[0-4]\\d|25[0-5])\\.){3}(?:\\d|[01]?\\d\\d|2[0-4]\\d|25[0-5])$"), 
        base64 : new RegExp("[^a-zA-Z\\d\\/\\+=]")
    }, 
    
    checkField : function (fields, property)
    {
        var i = 0, len = fields.length;
        var key, ret = [];
        var msg = this._message;
        
        for (; i < len; i++)
        {
            key = fields[i];
            !(key in property) && ret.push({field : key, message : msg.required});
        }
        
        return ret.length ? ret : null;
    }, 
    
    checkValue : function (fields, valids, property, lang)
    {
        var i = 0, flen = fields.length;
        var j, vlen;
        var key, val;
        var item, per, text;
        var ret = [];
        var msg = this._message;
        var regex = this._regexRule;
        
        for (; i < flen; i++)
        {
            key = fields[i];
            item = valids[key];
            val = property[key];
            
            if (undefined === item || !Array.isArray(item) || 0 === (vlen = item.length))
            {
                continue;
            }
            
            for (j = 0; j < vlen; j++)
            {
                per = item[j];
                
                if (undefined === val || !val.length)
                {
                    // {type : "required", message : "..."}
                    if ("required" === per.type)
                    {
                        if ("lookup" in per)
                        {
                            text = lang[per.lookup];
                        }
                        else if ("message" in per)
                        {
                            text = per.message;
                        }
                        else
                        {
                            text = msg.required;
                        }
                    }
                    else
                    {
                        text = msg.required;
                    }
                }
                // {type : "min_length", encoding : "utf-8", message : "...", length : 4}
                else if ("min_length" === per.type)
                {
                    if ("encoding" in per)
                    {
                        if (LString.sizeof(val, per.encoding) >= per.length)
                        {
                            continue;
                        }
                    }
                    else if (val.length >= per.length)
                    {
                        continue;
                    }
                    
                    if ("lookup" in per)
                    {
                        text = lang[per.lookup];
                    }
                    else if ("message" in per)
                    {
                        text = per.message;
                    }
                    else
                    {
                        text = msg.min_length;
                    }
                    
                    text = text.replace("%d", per.length);
                }
                // {type : "max_length", encoding : "utf-8", message : "...", length : 32}
                else if ("max_length" === per.type)
                {
                    if ("encoding" in per)
                    {
                        if (LString.sizeof(val, per.encoding) <= per.length)
                        {
                            continue;
                        }
                    }
                    else if (val.length <= per.length)
                    {
                        continue;
                    }
                    
                    if ("lookup" in per)
                    {
                        text = lang[per.lookup];
                    }
                    else if ("message" in per)
                    {
                        text = per.message;
                    }
                    else
                    {
                        text = msg.max_length;
                    }
                    
                    text = text.replace("%d", per.length);
                }
                // {type : "exact_length", encoding : "utf-8", message : "...", length : 8}
                else if ("exact_length" === per.type)
                {
                    if ("encoding" in per)
                    {
                        if (LString.sizeof(val, per.encoding) === per.length)
                        {
                            continue;
                        }
                    }
                    else if (val.length === per.length)
                    {
                        continue;
                    }
                    
                    else if ("lookup" in per)
                    {
                        text = lang[per.lookup];
                    }
                    else if ("message" in per)
                    {
                        text = per.message;
                    }
                    else
                    {
                        text = msg.exact_length;
                    }
                    
                    text = text.replace("%d", per.length);
                }
                // {type : "min_value", message : "...", value : 0}
                else if ("min_value" === per.type)
                {
                    if (val >= per.value)
                    {
                        continue;
                    }
                    else if ("lookup" in per)
                    {
                        text = lang[per.lookup];
                    }
                    else if ("message" in per)
                    {
                        text = per.message;
                    }
                    else
                    {
                        text = msg.min_value;
                    }
                    
                    text = text.replace("%d", per.value);
                }
                // {type : "max_value", message : "...", value : 119}
                else if ("max_value" === per.type)
                {
                    if (val <= per.value)
                    {
                        continue;
                    }
                    else if ("lookup" in per)
                    {
                        text = lang[per.lookup];
                    }
                    else if ("message" in per)
                    {
                        text = per.message;
                    }
                    else
                    {
                        text = msg.max_value;
                    }
                    
                    text = text.replace("%d", per.value);
                }
                // {type : "numeric", message : "..."}
                else if ("numeric" === per.type)
                {
                    if (!isNaN(val))
                    {
                        continue;
                    }
                    else if ("lookup" in per)
                    {
                        text = lang[per.lookup];
                    }
                    else if ("message" in per)
                    {
                        text = per.message;
                    }
                    else
                    {
                        text = msg.numeric;
                    }
                }
                // {type : "integer", message : "..."}
                else if ("integer" === per.type)
                {
                    if (!isNaN(val) && !~val.indexOf("."))
                    {
                        continue;
                    }
                    else if ("lookup" in per)
                    {
                        text = lang[per.lookup];
                    }
                    else if ("message" in per)
                    {
                        text = per.message;
                    }
                    else
                    {
                        text = msg.integer;
                    }
                }
                // {type : "matches", message : "...", field : "fieldName"}
                else if ("matches" === per.type)
                {
                    if (val === property[per.field])
                    {
                        continue;
                    }
                    else if ("lookup" in per)
                    {
                        text = lang[per.lookup];
                    }
                    else if ("message" in per)
                    {
                        text = per.message;
                    }
                    else
                    {
                        text = msg.matches;
                    }
                    
                    text = text.replace("%s", per.field)
                }
                // {type : "alpha", message : "..."}
                else if ("alpha" === per.type)
                {
                    if (regex.alpha.test(val))
                    {
                        continue;
                    }
                    else if ("lookup" in per)
                    {
                        text = lang[per.lookup];
                    }
                    else if ("message" in per)
                    {
                        text = per.message;
                    }
                    else
                    {
                        text = msg.alpha;
                    }
                }
                // {type : "alpha_numeric", message : "..."}
                else if ("alpha_numeric" === per.type)
                {
                    if (regex.alphaNumeric.test(val))
                    {
                        continue;
                    }
                    else if ("lookup" in per)
                    {
                        text = lang[per.lookup];
                    }
                    else if ("message" in per)
                    {
                        text = per.message;
                    }
                    else
                    {
                        text = msg.alpha_numeric;
                    }
                }
                // {type : "alpha_dash", message : "..."}
                else if ("alpha_dash" === per.type)
                {
                    if (regex.alphaDash.test(val))
                    {
                        continue;
                    }
                    else if ("lookup" in per)
                    {
                        text = lang[per.lookup];
                    }
                    else if ("message" in per)
                    {
                        text = per.message;
                    }
                    else
                    {
                        text = msg.alpha_dash;
                    }
                }
                // {type : "inclusion", message : "...", list : ["yellow", "blue"]}
                // {type : "inclusion", lookup : "...", lookupList : "..."}
                else if ("inclusion" === per.type)
                {
                    if ("lookupList" in per)
                    {
                        if (~lang[per.lookupList].indexOf(val))
                        {
                            continue;
                        }
                    }
                    else if (~per.list.indexOf(val))
                    {
                        continue;
                    }
                    
                    if ("lookup" in per)
                    {
                        text = lang[per.lookup];
                    }
                    else if ("message" in per)
                    {
                        text = per.message;
                    }
                    else
                    {
                        text = msg.inclusion;
                    }
                    
                    if ("lookupList" in per)
                    {
                        text = text.replace("%s", "[" + lang[per.lookupList].join(", ") + "]");
                    }
                    else
                    {
                        text = text.replace("%s", "[" + per.list.join(", ") + "]");
                    }
                }
                // {type : "exclusion", message : "...", list : ["green", "red"]}
                // {type : "exclusion", lookup : "...", lookupList : "..."}
                else if ("exclusion" === per.type)
                {
                    if ("lookupList" in per)
                    {
                        if (~lang[per.lookupList].indexOf(val))
                        {
                            continue;
                        }
                    }
                    else if (~per.list.indexOf(val))
                    {
                        continue;
                    }
                    
                    if ("lookup" in per)
                    {
                        text = lang[per.lookup];
                    }
                    else if ("message" in per)
                    {
                        text = per.message;
                    }
                    else
                    {
                        text = msg.exclusion;
                    }
                    
                    if ("lookupList" in per)
                    {
                        text = text.replace("%s", "[" + lang[per.lookupList].join(", ") + "]");
                    }
                    else
                    {
                        text = text.replace("%s", "[" + per.list.join(", ") + "]");
                    }
                }
                // {type : "format", message : "...", regex : /abc/}
                else if ("format" === per.type)
                {
                    if (per.regex.test(val))
                    {
                        continue;
                    }
                    else if ("lookup" in per)
                    {
                        text = lang[per.lookup];
                    }
                    else if ("message" in per)
                    {
                        text = per.message;
                    }
                    else
                    {
                        text = msg.format;
                    }
                }
                // {type : "email", message : "..."}
                else if ("email" === per.type)
                {
                    if (regex.email.test(val))
                    {
                        continue;
                    }
                    else if ("lookup" in per)
                    {
                        text = lang[per.lookup];
                    }
                    else if ("message" in per)
                    {
                        text = per.message;
                    }
                    else
                    {
                        text = msg.email;
                    }
                }
                // {type : "url", message : "..."}
                else if ("url" === per.type)
                {
                    if (regex.url.test(val))
                    {
                        continue;
                    }
                    else if ("lookup" in per)
                    {
                        text = lang[per.lookup];
                    }
                    else if ("message" in per)
                    {
                        text = per.message;
                    }
                    else
                    {
                        text = msg.url;
                    }
                }
                // {type : "ip", message : "..."}
                else if ("ip" === per.type)
                {
                    if (regex.ip.test(val))
                    {
                        continue;
                    }
                    else if ("lookup" in per)
                    {
                        text = lang[per.lookup];
                    }
                    else if ("message" in per)
                    {
                        text = per.message;
                    }
                    else
                    {
                        text = msg.ip;
                    }
                }
                // {type : "base64", message : "..."}
                else if ("base64" === per.type)
                {
                    if (!regex.base64.test(val))
                    {
                        continue;
                    }
                    else if ("lookup" in per)
                    {
                        text = lang[per.lookup];
                    }
                    else if ("message" in per)
                    {
                        text = per.message;
                    }
                    else
                    {
                        text = msg.base64;
                    }
                }
                else
                {
                    continue;
                }
                
                ret.push({field : key, message : text});
                break;
            }
        }
        
        return ret.length ? ret : null;
    }
};

module.exports = Validate;