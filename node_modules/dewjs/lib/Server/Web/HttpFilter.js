/**
 * @author     LiuZhaoHui <hi.liuzhaoxin@gmail.com>
 * @link       http://www.eatbean.com/nodejs
**/

"use strict";

var HttpFlow = Dew("use", "Server.Web.HttpFlow");
var HttpRouter = Dew("use", "Server.Web.Router.HttpRouter");

var HttpFilter = 
{
    __name__ : "HttpFilter", 
    
    initialize : function (application)
    {
        
    }, 
    
    // 返回一个 HttpFilter 实例
    getInstance : function (async, route, context, cache)
    {
        var self = Object.create(this);
        self._cache = cache;
        self._async = async;
        self._context = context;
        
        var reference = route.filter._reference;
        var controller = Object.create(reference.object);
        cache.controller = controller;
        reference.object.__proto__.launch
          .call(controller, context, route.filter)[reference.method](self);
        
        return self;
    }, 
    
    // forward 用于把当前生成的执行上下文转发给其他控制器处理
    // 并非通过发送 301 来重定向请求地址
    forward : function (url)
    {
        var route, type = typeof url;
        
        if ("string" === type)
        {
            route = HttpRouter.match(url);
        }
        else if ("object" === type)
        {
            route = HttpRouter.find(url);
        }
        
        if (!route)
        {
            throw new Error("invalid data");
        }
        
        if ("flow" in route)
        {
            HttpFlow.getInstance(route, this._context, this._cache);
        }
        else
        {
            HttpRouter.dispatch(route, this._context, this._cache);
        }
    }, 
    
    resume : function ()
    {
        this._async.next();
    }
};

module.exports = HttpFilter;