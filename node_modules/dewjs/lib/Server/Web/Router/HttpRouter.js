/**
 * @author     LiuZhaoHui <hi.liuzhaoxin@gmail.com>
 * @link       http://www.eatbean.com/nodejs
**/

"use strict";

var RouteTable = Dew("use", "Server.Web.Router.RouteTable");

var HttpRouter = 
{
    __name__ : "HttpRouter", 
    
    initialize : function (application)
    {
        RouteTable.initialize(application);
    }, 
    
    // 给出模块名，控制器名，动作名找出路由项对象，否则返回 null
    find : function (obj)
    {
        var ref = RouteTable._tables;
        var method = "method" in obj ? obj.method : "get";
        var module = "module" in obj ? obj.module : RouteTable._defaultRouteName;
        var controller = obj.controller;
        var action = obj.action;
        
        if (module in ref)
        {
            ref = ref[module];
            
            if (controller in ref)
            {
                ref = ref[controller];
                
                if (action in ref)
                {
                    ref = ref[action];
                    
                    if (method in ref)
                    {
                        return ref[method];
                    }
                }
            }
        }
        
        return null;
    }, 
    
    // match 用于匹配 url 地址，匹配成功返回一个路由项对象，否则返回 null
    match : function (url, method)
    {
        var ref = RouteTable._routes;
        var slash = "/", asterisk = "*";
        var i = 0, len = url.length;
        var index = 0;
        var match = [], value = [], item;
        
        if (undefined === method) method = "get";
        
        if (slash === url[i])
        {
            i++;
            index++;
        }
        
        /*
        if (i !== len && slash === url[len - 1])
        {
            len--;
        }
        */
        
        for (; i < len; i++)
        {
            if (slash === url[i])
            {
                match.push(url.slice(index, i));
                index = i + 1;
            }
        }
        
        match.push(url.slice(index, len));
        
        len = match.length;
        i = len + 2;
        
        if (!(method in ref && i in ref[method]))
        {
            return null;
        }
        
        ref = ref[method][i];
        
        for (i = 0; i < len; i++)
        {
            item = match[i];
            
            if (item in ref)
            {
                ref = ref[item];
            }
            else if (asterisk in ref)
            {
                value.push(item);
                ref = ref[asterisk];
            }
            else
            {
                return null;
            }
        }
        
        if (!("_match" in ref))
        {
            return ref;
        }
        
        var result = Object.create(ref);
        var param = result.param = {};
        
        if ("param" in ref)
        {
            param.__proto__ = ref.param;
        }
        
        item = ref._match;
        
        for (i = 0, len = item.length; i < len; i++)
        {
            param[item[i]] = value[i];
        }
        
        return result;
    }, 
    
    // dispatch 用于分发到不同的控制器来处理
    dispatch : function (route, context, cache)
    {
        var reference = route.dispatch._reference;
        var object = reference.object;
        var method = reference.method;
        
        if ("controller" in cache)
        {
            var controller = cache.controller;
            controller._route = route.dispatch;
            controller.__proto__ = object;
        }
        else
        {
            var controller = Object.create(object);
            object.__proto__.launch.call(controller, context, route.dispatch);
        }
        
        if (object.hasOwnProperty("launch"))
        {
            controller.launch(controller[method].bind(controller));
        }
        else
        {
            controller[method]();
        }
    }, 
    
    // assemble 用于组装 url 地址，可以动态生成 a 链接地址
    // assemble({controller : "articleController", action : "readAction", module : "Default"}, {page : 2, id : 1000})
    // assemble("/article/read/:page/:id", {page : 2, id : 1000})
    assemble : function (url, data)
    {
        if ("object" === typeof url)
        {
            var route = this.find(url);
            
            if (route === null)
            {
                throw Error("Can not find " + url.module + "->" 
                  + url.controller + "." + url.action + " routing information");
            }
            
            url = route.url;
        }
        
        var offset, index = 1;
        var key, ret = "";
        var record = [];
        var isContinue = true;
        
        do
        {
            offset = url.indexOf("/", index);
            
            if (!~offset)
            {
                isContinue = false;
                offset = url.length;
            }
            
            if (":" === url[index])
            {
                key = url.slice(index + 1, offset);
                
                if (data && key in data)
                {
                    record.push(key);
                    ret += "/" + data[key];
                }
                else
                {
                    ret += "/" + url.slice(index, offset);
                }
            }
            else
            {
                ret += "/" + url.slice(index, offset);
            }
            
            index = offset + 1;
        } while (isContinue);
        
        if (data)
        {
            index = Object.keys(data).length - record.length;
            
            if (index)
            {
                ret += "?";
                
                for (key in data)
                {
                    if (!~record.indexOf(key))
                    {
                        if (--index)
                        {
                            ret += key + "=" + data[key] + "&";
                        }
                        else
                        {
                            ret += key + "=" + data[key];
                            break;
                        }
                    }
                }
            }
        }
        
        return ret;
    }
};

module.exports = HttpRouter;