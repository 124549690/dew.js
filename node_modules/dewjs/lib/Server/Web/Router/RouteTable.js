/**
 * @author     LiuZhaoHui <hi.liuzhaoxin@gmail.com>
 * @link       http://www.eatbean.com/nodejs
**/

"use strict";

var fs = require("fs");

var RouteTable = 
{
    __name__ : "RouteTable", 
    
    _defaultRouteName : "Default", 
    _defaultFileName : "MainRoute.json", 
    
    _routes : {}, 
    _tables : {}, 
    
    initialize : function (application)
    {
        application.useSection("paths");
        
        var applicationPath = application.get("startupPath") + "/" 
          + application.get("applicationPath");
        
        var moduleList = fs.readdirSync(applicationPath), moduleName, modulePath, fp;
        
        var i = 0, iLen = moduleList.length;
        var route;
        
        var j, jLen;
        var load, extend;
        
        var k, kLen;
        var item, obj, ref;
        var controllerName, actionName;
        
        var l, lLen;
        var flow;
        
        for (; i < iLen; i++)
        {
            moduleName = moduleList[i];
            modulePath = applicationPath + "/" + moduleName;
            
            fp = modulePath + "/Router/" + this._defaultFileName;
            
            if (!(fs.existsSync(fp) && fs.statSync(fp).isFile())) continue;
            
            route = JSON.parse(fs.readFileSync(fp, "utf8"));
            
            for (j = 0, jLen = route.length; j < jLen; j++)
            {
                fp = modulePath + "/Router/" + route[j].load;
                
                if (!(fs.existsSync(fp) && fs.statSync(fp).isFile()))
                {
                    throw new Error("File \"" + fp + "\" does not exist");
                }
                
                load = JSON.parse(fs.readFileSync(fp, "utf8"));
                extend = route[j].extend;
                
                for (k = 0, kLen = load.length; k <kLen; k++)
                {
                    item = load[k];
                    item.__proto__ = extend;
                    
                    item.method = "method" in item ? item.method.toLowerCase() : "get";
                    
                    if (this._defaultRouteName !== moduleName)
                    {
                        item.url = "/" + moduleName + item.url;
                    }
                    
                    if ("dispatch" in item)
                    {
                        obj = item.dispatch;
                        obj.module = moduleName;
                        controllerName = obj.controller;
                        actionName = obj.action;
                        
                        fp = modulePath + "/Controller/" + controllerName + ".js";
                        ref = require(fp);
                        
                        ref.hasOwnProperty("initialize") && ref.initialize(modulePath, application);
                        item.dispatch._reference = {object : ref, method : actionName};
                    }
                    
                    if ("filter" in item)
                    {
                        obj = item.filter;
                        obj.module = moduleName;
                        controllerName = obj.controller;
                        actionName = obj.action;
                        
                        fp = modulePath + "/Controller/" + controllerName + ".js";
                        ref = require(fp);
                        
                        obj._reference = {object : ref, method : actionName};
                    }
                    
                    if ("flow" in item)
                    {
                        flow = item.flow;
                        
                        if (Array.isArray(flow) && flow.length)
                        {
                            for (l = 0, lLen = flow.length; l < lLen; l++)
                            {
                                obj = flow[l];
                                obj.module = moduleName;
                                controllerName = obj.controller;
                                actionName = obj.action;
                                
                                fp = modulePath + "/Controller/" + controllerName + ".js";
                                ref = require(fp);
                                
                                obj._reference = {object : ref, method : actionName};
                            }
                        }
                        else
                        {
                            delete item.flow;
                        }
                    }
                    
                    this.mapRoute(item);
                    
                    if ("forward" in item)
                    {
                        obj = item.forward;
                        obj.module = moduleName;
                    }
                    else
                    {
                        this.mapTable(item);
                    }
                }
            }
        }
        
        // console.log(JSON.stringify(this));
    }, 
    
    mapTable : function (route)
    {
        var ref = this._tables;
        var moduleName = route.dispatch.module;
        var controllerName = route.dispatch.controller;
        var actionName = route.dispatch.action;
        var methodName = route.method;
        
        if (!(moduleName in ref))
        {
            ref[moduleName] = {};
        }
        
        ref = ref[moduleName];
        
        if (!(controllerName in ref))
        {
            ref[controllerName] = {};
        }
        
        ref = ref[controllerName];
        
        if (!(actionName in ref))
        {
            ref[actionName] = {};
        }
        
        ref[actionName][methodName] = route;
    }, 
    
    mapRoute : function (route)
    {
        var i = 0, len = 1;
        var offset, index = 0;
        var ref = this._routes;
        
        var match = [], c;
        var stack = [route.method];
        
        do
        {
            len++;
            offset = route.url.indexOf("/", index);
            
            if (!~offset)
            {
                stack.push(route.url.slice(index));
                break;
            }
            
            stack.push(route.url.slice(index, offset));
            index = offset + 1;
        } while (true);
        
        stack[1] = len--;
        
        for (; i <= len; i++)
        {
            if (stack[i][0] === ":")
            {
                c = "*";
                match.push(stack[i].slice(1));
            }
            else
            {
                c = stack[i];
            }
            
            if (i === len)
            {
                if (match.length)
                {
                    route._match = match;
                }
                
                ref[c] = route;
                break;
            }
            
            if (!(c in ref))
            {
                ref[c] = {};
            }
            
            ref = ref[c];
        }
    }
};

module.exports = RouteTable;