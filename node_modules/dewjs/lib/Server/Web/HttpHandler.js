/**
 * @author     LiuZhaoHui <hi.liuzhaoxin@gmail.com>
 * @link       http://www.eatbean.com/nodejs
**/

"use strict";

var Async = Dew("use", "Common.Async");

var HttpContext = Dew("use", "Server.Web.HttpContext");

var HttpFlow = Dew("use", "Server.Web.HttpFlow");
var HttpFilter = Dew("use", "Server.Web.HttpFilter");

var HttpRouter = Dew("use", "Server.Web.Router.HttpRouter");
var HttpSession = Dew("use", "Server.Web.Session.HttpSession");

var HttpForm = Dew("use", "Server.Web.Request.Form.HttpForm");
var HttpRequest = Dew("use", "Server.Web.Request.HttpRequest");
var HttpResponse = Dew("use", "Server.Web.Response.HttpResponse");
var HttpResource = Dew("use", "Server.Web.Resource.HttpResource");

var StandardModel = Dew("use", "Server.Web.Model.StandardModel");
var Template = Dew("use", "Server.Web.View.Template");
var ActionController = Dew("use", "Server.Web.Controller.ActionController");

var HttpHandler = 
{
    __name__ : "HttpHandler", 
    
    _allowedMethods : ["GET", "POST"], 
    
    initialize : function (application)
    {
        HttpContext.initialize(application);
        
        HttpFlow.initialize(application);
        HttpFilter.initialize(application);
        HttpRouter.initialize(application);
        HttpSession.initialize(application);
        
        HttpForm.initialize(application);
        HttpRequest.initialize(application);
        HttpResponse.initialize(application);
        HttpResource.initialize(application);
        
        StandardModel.initialize(application);
        Template.initialize(application);
        ActionController.initialize(application);
    }, 
    
    processRequest : function (req, res)
    {
        if (~this._allowedMethods.indexOf(req.method))
        {
            var request = HttpRequest.getInstance(req);
            
            if (request.fileExtName)
            {
                HttpResource.dispatch(req, res, request.requestUri, request.path, request.fileExtName);
            }
            else
            {
                req.method = req.method.toLowerCase();
                var response = HttpResponse.getInstance(res);
                this.beginProcessRequest(request, response);
            }
        }
        else
        {
            res.statusCode = 405;
            res.setHeader("Allow", "GET, POST");
            res.end("HTTP method %s is not supported by this URL".replace("%s", req.method));
        }
    }, 
    
    beginProcessRequest : function (request, response)
    {
        var route = HttpRouter.match(request.requestUri, request.httpMethod);
        if (!route)
        {
            route = HttpRouter.match(request.contextPath + "/notFound", "get");
            if (!route)
            {
                response.statusCode = 404;
                return response.end();
            }
        }
        
        if ("forward" in route)
        {
            route = HttpRouter.find(route.forward);
            if (!route)
            {
                response.statusCode = 500;
                return response.end();
            }
        }
        
        request.querys.__proto__ = route.param;
        
        // upload -> progress -> session -> filter -> dispatch
        
        var cache = {};
        var async = new Async();
        var context = HttpContext.getInstance(request, response);
        
        if (request.isPost)
        {
            async.push({object : HttpForm, method : "getInstance", args : [async, route, request/*, response*/]});
        }
        
        if ("allow" in route && ~route.allow.indexOf("session"))
        {
            async.push({object : HttpSession, method : "getInstance", args : [async, context, request, response]});
        }
        
        if ("filter" in route)
        {
            async.push({object : HttpFilter, method : "getInstance", args : [async, route, context, cache]});
        }
        
        if ("flow" in route)
        {
            async.push({object : HttpFlow, method : "getInstance", args : [route, context, cache]});
        }
        else
        {
            async.push({object : HttpRouter, method : "dispatch", args : [route, context, cache]})
        }
        
        async.next();
        
        // response.on("finish", this.endProcessRequest.bind(this, context));
    }, 
    
    endProcessRequest : function (context)
    {
        // ...
    }
};

module.exports = HttpHandler;