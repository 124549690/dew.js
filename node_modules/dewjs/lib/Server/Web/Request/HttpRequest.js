/**
 * @author     LiuZhaoHui <hi.liuzhaoxin@gmail.com>
 * @link       http://www.eatbean.com/nodejs
**/

"use strict";

var querystring = require("querystring");

var Ip = Dew("use", "Tool.Ip");
var LString = Dew("use", "Lang.LString");
var RouteTable = Dew("use", "Server.Web.Router.RouteTable");

var HttpRequest = 
{
    __name__ : "HttpRequest", 
    
    METHOD_GET : "get", 
    METHOD_POST : "post", 
    
    _languageCookieName : "language", 
    
    _path : "", 
    _fileName : "", 
    _fileExtName : "", 
    _isAuthenticated : false, 
    
    initialize : function (application)
    {
        application.useSection("server");
        this._httpServerIp = application.get("host");
        
        application.useSection("paths");
        this._applicationPath = application.get("startupPath") + "/" 
          + application.get("applicationPath");
    }, 
    
    // 返回一个 HttpRequest 实例
    getInstance : function (request)
    {
        var self = Object.create(this);
        self._requestTime = +new Date();
        
        var url = decodeURIComponent(request.url);
        var index = url.indexOf("?");
        var requestUri = ~index ? url.slice(0, index) : url;
        
        if (~index)
        {
            self._queryString = url.slice(index + 1);
        }
        
        index = 1;
        
        var slash = "/", dot = ".", n;
        var offset = requestUri.indexOf(slash, index);
        
        if (~offset)
        {
            var stack = [];
            // /../a/../b/c/d/../e
            // /b/c/e
            do
            {
                n = offset - index;
                
                if (2 === n && requestUri[index] === dot && requestUri[index + 1] === dot)
                {
                    stack.pop();
                }
                else if (1 !== n || requestUri[index] !== dot)
                {
                    stack.push(requestUri.slice(index, offset));
                }
                
                index = offset + 1;
                offset = requestUri.indexOf(slash, index);
            } while (~offset);
            
            n = requestUri.length - index;
            
            if (2 === n && requestUri[index] === dot && requestUri[index + 1] === dot)
            {
                stack.pop();
            }
            else if (1 !== n || requestUri[index] !== dot)
            {
                stack.push(requestUri.slice(index));
            }
            
            requestUri = slash + stack.join(slash);
        }
        
        offset = -1;
        index = requestUri.length;
        
        do
        {
            if (requestUri[--index] === slash)
            {
                if (index)
                {
                    self._path = requestUri.slice(0, index);
                }
                
                if (~offset)
                {
                    self._fileName = requestUri.slice(++index, offset);
                }
                
                break;
            }
            else if (requestUri[index] === dot)
            {
                offset = index;
                self._fileExtName = requestUri.slice(1 + index);
            }
        } while (true);
        
        self._requestUri = requestUri;
        self._requestContext = request;
        
        /*
        console.log("rawUrl: " + self.rawUrl);
        console.log("url: " + self.url);
        console.log("queryString: " + self.queryString);
        console.log("requestUri: " + self.requestUri);
        console.log("path: " + self.path);
        console.log("fileName: " + self.fileName);
        console.log("fileExtName: " + self.fileExtName);
        console.log("\n");
        */
        
        return self;
    }, 
    
    // 返回原始 request 对象
    get requestContext ()
    {
        return this._requestContext;
    }, 
    
    // 获取当前请求的原始 URL 的信息
    get rawUrl ()
    {
        return this._requestContext.url;
    }, 
    
    // 获取有关当前请求的 URL 的信息
    get url ()
    {
        if (!("_url" in this))
        {
            if ("_queryString" in this)
            {
                this._url = this._requestUri + "?" + this._queryString;
            }
            else
            {
                this._url = this._requestUri;
            }
        }
        
        return this._url;
    }, 
    
    // 获取 HTTP 查询字符串
    get queryString ()
    {
        return "_queryString" in this ? this._queryString : "";
    }, 
    
    // 获取 HTTP 请求地址, 不包含 ? 之后字符串
    get requestUri ()
    {
        return this._requestUri;
    }, 
    
    // 获取文件路径
    get path ()
    {
        return this._path;
    }, 
    
    // 获取请求地址中的文件名
    get fileName ()
    {
        return this._fileName;
    }, 
    
    // 获取请求地址中的文件扩展名
    get fileExtName ()
    {
        return this._fileExtName;
    }, 
    
    // 当前应用程序的根目录的文件系统路径
    get applicationPath ()
    {
        return this._applicationPath;
    }, 
    
    // 当前应用程序的虚拟路径
    get contextPath ()
    {
        if (!("_contextPath" in this))
        {
            var index = this._requestUri.indexOf("/", 1);
            
            if (~index)
            {
                var moduleName = this._requestUri.slice(1, index);
                if (moduleName in RouteTable._tables && moduleName !== RouteTable._defaultRouteName)
                {
                    this._contextPath = "/" + moduleName;
                }
                else
                {
                    this._contextPath = "";
                }
            }
            else
            {
                this._contextPath = "";
            }
        }
        
        return this._contextPath;
    }, 
    
    // 获取有关客户端上次请求的 URL 的信息，该请求链接到当前的 URL
    get urlReferrer ()
    {
        if (!("_urlReferrer" in this))
        {
            this._urlReferrer = "referer" in this._requestContext.headers 
              ? this._requestContext.headers.referer : "";
        }
        
        return this._urlReferrer;
    }, 
    
    // 处理请求时的时间戳
    get requestTime ()
    {
        return this._requestTime;
    }, 
    
    // 获取客户端使用的 HTTP 数据传输方法（如 GET、POST 或 HEAD）
    get httpMethod ()
    {
        return this._requestContext.method;
    }, 
    
    // 获取客户端使用的 HTTP 版本
    get httpVersion ()
    {
        return this._requestContext.httpVersion;
    }, 
    
    // 获取客户端浏览器的原始用户代理信息
    get userAgent ()
    {
        return this._requestContext.headers["user-agent"];
    }, 
    
    // 获取客户端语种
    get userLanguage ()
    {
        if (!("_language" in this))
        {
            var lang = this.cookies[this._languageCookieName];
            if (!lang)
            {
                lang = this._requestContext.headers["accept-language"];
                if (lang)
                {
                    var index = lang.indexOf(",");
                    if (~index)
                    {
                        lang = lang.slice(0, index);
                    }
                }
                
                this._language = lang ? lang.toLowerCase() : "unknown";
            }
            else
            {
                this._language = lang;
            }
        }
        
        return this._language;
    }, 
    
    // 获取远程客户端的 IP 主机地址
    get userHostAddress ()
    {
        if (!("_userHostAddress" in this))
        {
            this._userHostAddress = this.getHeader("x-real-ip", this._requestContext.socket.remoteAddress);
        }
        
        return this._userHostAddress;
    }, 
    
    // 获取 HTTP 头集合
    get headers ()
    {
        if (!("_headers" in this))
        {
            this._headers = this._requestContext.headers;
        }
        
        return this._headers;
    }, 
    
    // 获取 HTTP 头集合名
    get headerNames ()
    {
        if (!("_headerNames" in this))
        {
            this._headerNames = Object.keys(this._requestContext.headers);
        }
        
        return this._headerNames;
    }, 
    
    // 获取一个 HTTP 头值
    getHeader : function (key, def)
    {
        if (!("_headers" in this))
        {
            this._headers = this._requestContext.headers;
        }
        
        return key in this._headers ? this._headers[key] : def;
    }, 
    
    // 获取 cookie 集合
    get cookies ()
    {
        if (!("_cookies" in this))
        {
            this._cookies = querystring.parse(this._requestContext.headers.cookie, "; ");
        }
        
        return this._cookies;
    }, 
    
    // 获取 cookie 指定值
    getCookie : function (key, def)
    {
        if (!("_cookies" in this))
        {
            this._cookies = querystring.parse(this.headers.cookie, "; ");
        }
        
        return key in this._cookies ? this._cookies[key] : def;
    }, 
    
    // 获取 get 集合
    get querys ()
    {
        if (!("_querys" in this))
        {
            this._querys = querystring.parse(this._queryString);
        }
        
        return this._querys;
    }, 
    
    // 设置 get 值
    setQuery : function (key, val)
    {
        if (!("_querys" in this))
        {
            this._querys = querystring.parse(this._queryString);
        }
        
        this._querys[key] = val;
    }, 
    
    // 获取 get 指定值
    getQuery : function (key, def)
    {
        if (!("_querys" in this))
        {
            this._querys = querystring.parse(this._queryString);
        }
        
        return key in this._querys ? this._querys[key] : def;
    }, 
    
    // 获取 post 集合
    get posts ()
    {
        if (!("_posts" in this))
        {
            this._posts = {};
        }
        
        return this._posts;
    }, 
    
    // 设置 post 值
    setPost : function (key, val)
    {
        if (!("_posts" in this))
        {
            this._posts = {};
        }
        
        this._posts[key] = val;
    }, 
    
    // 获取 post 指定值
    getPost : function (key, def)
    {
        if (!("_posts" in this))
        {
            this._posts = {};
        }
        
        return key in this._posts ? this._posts[key] : def;
    }, 
    
    // 获取 file 集合
    get files ()
    {
        if (!("_files" in this))
        {
            this._files = {};
        }
        
        return this._files;
    }, 
    
    // 设置 file 值
    setFile : function (key, val)
    {
        if (!("_files" in this))
        {
            this._files = {};
        }
        
        this._files[key] = val;
    }, 
    
    // 获取 file 指定值
    getFile : function (key, def)
    {
        if (!("_files" in this))
        {
            this._files = {};
        }
        
        return key in this._files ? this._files[key] : def;
    }, 
    
    // 检查是否为内网
    get isLocal ()
    {
        if (!("_isLocal" in this))
        {
            var ip = this._requestContext.socket.remoteAddress;
            if (ip === this._httpServerIp || 
                lString.startsWith(ip, "127.") || 
                lString.startsWith(ip, "10.") || 
                lString.startsWith(ip, "192.168") || 
                lString.startsWith(ip, "172.16"))
            {
                this._isLocal = true;
            }
            else
            {
                this._isLocal = false;
            }
        }
        
        return this._isLocal;
    }, 
    
    // 设置认证
    set isAuthenticated (auth)
    {
        this._isAuthenticated = auth;
    }, 
    
    // 获取认证
    get isAuthenticated ()
    {
        return this._isAuthenticated;
    }, 
    
    /*
    // 是否为 HTTP 安全套接字连接
    get isSecureConnection ()
    {
        return false;
    }, 
    */
    
    // 是否为 XmlHttpRequest 请求
    get isXmlHttpRequest ()
    {
        return "XMLHttpRequest" === this.getHeader("x-requested-with");
    }, 
    
    // 是否为 Jsonp 请求
    get isJsonpRequest ()
    {
        return "JSONP" === this.getHeader("x-requested-with");
    }, 
    
    // 是否为 Flash 请求
    get isFlashRequest ()
    {
        return !!~this.userAgent.indexOf(" flash");
    }, 
    
    // 是否为 get 请求方法
    get isGet ()
    {
        return this._requestContext.method === this.METHOD_GET;
    }, 
    
    // 是否为 post 请求方法
    get isPost ()
    {
        return this._requestContext.method === this.METHOD_POST;
    }
};

module.exports = HttpRequest;