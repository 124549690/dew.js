/**
 * @author     LiuZhaoHui <hi.liuzhaoxin@gmail.com>
 * @link       http://www.eatbean.com/nodejs
**/

"use strict";

var fs = require("fs");

var LString = Dew("use", "Lang.LString");
var Locale = Dew("use", "Common.Locale");
var Config = Dew("use", "Common.Config");

var Template = Dew("use", "Server.Web.View.Template");
var HttpCookie = Dew("use", "Server.Web.Response.HttpCookie");

var ActionController = 
{
    __name__ : "ActionController", 
    
    _cacheData : {}, 
    _defaultTokenName : "dtoken", 
    _defaultLangListFileName : "lang.json", 
    
    RETURN_ERROR : 0, 
    RETURN_RIGHT : 1, 
    
    initialize : function (application)
    {
        application.useSection("paths");
        this._applicationPath = application.get("startupPath") + "/" 
          + application.get("applicationPath");
    }, 
    
    launch : function (context, route)
    {
        this.context = context;
        this.request = context._request;
        this.response = context._response;
        if (null !== context._session) this.session = context._session;
        
        this._route = route;
        this._realPath = this._applicationPath + "/" + route.module;
        
        if (!(route.module in this._cacheData))
        {
            this._cacheData[route.module] = {model : {}, view : {}};
        }
        
        this._currentCache = this._cacheData[route.module];
        
        // this.setToken();
        
        return this;
    }, 
    
    get language ()
    {
        if (!("_language" in this))
        {
            if (!("language" in this._currentCache))
            {
                var langListFile = this._realPath + "/Language/" + this._defaultLangListFileName;
                
                if (fs.existsSync(langListFile) && fs.statSync(langListFile).isFile())
                {
                    var langList = JSON.parse(fs.readFileSync(langListFile, "utf8"));
                    this._currentCache.language = new Locale(this._realPath + "/Language");
                    this._currentCache.language.setLanguageList(langList.list);
                    this._currentCache.language.setDefaultLanguage(langList.defaultLanguage);
                }
                else
                {
                    this._currentCache.language = null;
                }
            }
            
            if (this._currentCache.language)
            {
                this._language = Object.create(this._currentCache.language);
                this._language.setLanguage(this.request.userLanguage);
            }
            else
            {
                this._language = this._currentCache.language;
            }
        }
        
        return this._language;
    }, 
    
    get config ()
    {
        if (!("_config" in this))
        {
            if (!("config" in this._currentCache))
            {
                this._currentCache.config = new Config(this._realPath + "/Config");
            }
            
            this._config = Object.create(this._currentCache.config);
        }
        
        return this._config;
    }, 
    
    get view ()
    {
        if (!("_view" in this))
        {
            this._view = Object.create(Template).getInstance(
              this._realPath, 
              this._route.module, 
              this._currentCache.view, 
              this.language, 
              this.config);
        }
        
        return this._view;
    }, 
    
    set : function (key, value)
    {
        if (!("_property" in this))
        {
            this._property = {};
        }
        
        if ("object" === typeof key)
        {
            value = key;
            for (key in value)
            {
                this._property[key] = value[key];
            }
        }
        else
        {
            this._property[key] = value;
        }
        
        return this;
    }, 
    
    has : function (key)
    {
        return "_property" in this && key in this._property;
    }, 
    
    get : function (key, def)
    {
        if (!("_property" in this))
        {
            this._property = {};
        }
        
        if (undefined === key)
        {
            return this._property;
        }
        
        return key in this._property ? this._property[key] : def;
    }, 
    
    remove : function (key)
    {
        if ("_property" in this && key in this._property)
        {
            delete this._property[key];
        }
        
        return this;
    }, 
    
    model : function (cmd, name)
    {
        if (!("_model" in this))
        {
            this._model = {};
        }
        
        switch (cmd)
        {
            case "use" : 
              if (!(name in this._model))
              {
                  if (!(name in this._currentCache.model))
                  {
                      this._currentCache.model[name] = require(this._realPath + "/Model/" 
                        + name[0].toUpperCase() + name.slice(1) + "Model.js");
                  }
                  
                  this._model[name] = Object.create(this._currentCache.model[name]).launch(this);
              }
              
              return this._model[name];
              
            case "remove" : 
              if (name in this._model)
              {
                  delete this._model[name];
              }
              
              return this;
        }
    }, 
    
    // 获得当前 module 名
    getModuleName : function ()
    {
        return this._route.module;
    }, 
    
    // 获取当前 action 名
    getActionName : function ()
    {
        return this._route.action;
    }, 
    
    // 获取当前 controller 名
    getControllerName : function ()
    {
        return this._route.controller;
    }, 
    
    /**
     * @brief ajaxReturn 生成 AJAX 数据
     * @param {number} status 0: 错误信息 or 1: 正确信息
     * @param {string} message 显示的信息
     * @param {object} data 传输的数据
     * @param {strict} type 数据类型, json or xml
     * @return {string} 返回 ajax 数据
    **/
    ajaxReturn : function (status, message, data, type)
    {
        var ret;
        switch (type)
        {
            case "xml" : 
              ret = "<?xml version=\"1.0\" encoding=\"utf-8\"?><return>";
              if (undefined !== status) ret += "<status>" + status + "</status>";
              if (undefined !== message) ret += "<message>" + message + "</message>"
              if (undefined !== data) ret += "<data>" + (typeof "string" === data ? data : JSON.stringify(data)) + "</data>";
              return ret + "</return>";
            
            default : 
              ret = {};
              if (undefined !== status) ret.status = status;
              if (undefined !== message) ret.message = message;
              if (undefined !== data) ret.data = data;
              return JSON.stringify(ret);
        }
    }, 
    
    // 获取 TOKEN 值
    getToken : function ()
    {
        return this.request.getCookie(this._defaultTokenName);
    }, 
    
    // 检测 TOKEN 值
    checkToken : function (ispost)
    {
        if (undefined === ispost)
        {
            ispost = true;
        }
        
        if (ispost && !this.request.isPost())
        {
            return false;
        }
        
        var token = this.request.getQuery(this._defaultTokenName);
        if (undefined === token)
        {
            token = this.request.getPost(this._defaultTokenName);
            if (undefined === token)
            {
                return false;
            }
        }
        
        return token === this.getToken() ? true : false;
    }, 
    
    // 设置 TOKEN 值, 防止 CSRF 攻击
    setToken : function ()
    {
        if (undefined === this.request.getCookie(this._defaultTokenName))
        {
            var val = LString.md5(Date() + this.request.headers["user-agent"] 
              + this.request.headers.host).slice(5, 13);
            
            this.response.addCookie(new HttpCookie(this._defaultTokenName, val, undefined, "/"));
        }
    }
};

module.exports = ActionController;