/**
 * @author     LiuZhaoHui <hi.liuzhaoxin@gmail.com>
 * @link       http://www.eatbean.com/nodejs
**/

"use strict";

module.exports = HttpCookie;

/**
 * HttpCookie object constructor
 *
 * @param string name
 * @param string value
 * @param string second
 * @param string path
 * @param string domain
 * @param string secure
 * @param string comment
 * @param string version
**/
function HttpCookie (name, value, second, path, domain, secure, comment, version)
{
    if (typeof name !== "string" || !name)
    {
        throw new Error("Cookies must have a name");
    }
    
    if (!this._isToken(name)
        || ~this._cookieIllegalName.indexOf(name.toUpperCase())
        || name[0] === "$")
    {
        throw new Error("Cookie name \"%s\" is a reserved token".replace(name));
    }
    
    this._name = name;
    this._value = encodeURIComponent(value);
    
    if (undefined !== second) this._expires = second;
    if (undefined !== path) this._path = path;
    if (undefined !== domain) this._domain = domain;
    if (undefined !== secure) this._secure = secure;
    if (undefined !== comment) this._comment = comment;
    if (undefined !== version) this._version = version;
}

HttpCookie.prototype = 
{
    constructor : HttpCookie, 
    
    _cookieIllegalName :
    [
        "COMMENT",	// rfc2019
        "DISCARD",	// 2019++
        "DOMAIN",
        "EXPIRES",	// (old cookies)
        "MAX-AGE",	// rfc2019
        "PATH",
        "SECURE",
        "VERSION"
    ],
    
    // Note -- disabled for now to allow full Netscape compatibility
    // from RFC 2068, token special case characters
    // _tspecials : "()<>@,;:\\\"/[]?={} \t";
    _tspecials : ",; ",
    
    /**
     *
     * Tests a string and returns true if the string counts as a 
     *
     * @param string the value to be tested
     * @return boolean
    **/
    _isToken : function (value)
    {
        var i = 0, len = value.length, c;
        var tspecials = this._tspecials;
        
        for (i = 0; i < len; i++)
        {
            c = value.charCodeAt(i);
            
            if (c < 0x20 || c >= 0x7f || ~tspecials.indexOf(value[i]))
            {
                return false;
            }
        }
        
        return true;
    }, 
    
    setName : function (newName)
    {
        this._name = newName;
    }, 
    
    // NAME= ... "$Name" style is reserved
    getName : function ()
    {
        return this._name;
    }, 
    
    // value of NAME
    setValue : function (newValue)
    {
        this._value = newValue;
    }, 
    
    getValue : function ()
    {
        return this._value;
    }, 
    
    // ;Max-Age=VALUE ... cookies auto-expire
    setMaxAge : function (expiry)
    {
        this._maxAge = expiry;
    }, 
    
    getMaxAge : function ()
    {
        return this._maxAge;
    }, 
    
    // ;Expires=DATE
    setExpires : function (expiry)
    {
        this._expires = expiry;
    }, 
    
    getExpires : function ()
    {
        return this._expires;
    }, 
    
    // ;Path=VALUE ... URLs that see the cookie
    setPath : function (uri)
    {
        this._path = uri;
    }, 
    
    getPath : function ()
    {
        return this._path;
    }, 
    
    // ;Domain=VALUE ... domain that sees cookie
    setDomain : function (pattern)
    {
        this._domain = pattern.toLowerCase();	// IE allegedly needs this
    }, 
    
    getDomain : function ()
    {
        return this._domain;
    }, 
    
    // ;Secure ... e.g. use SSL
    setSecure : function (flag)
    {
        this._secure = flag;
    }, 
    
    getSecure : function ()
    {
        return this._secure;
    }, 
    
    // ;Version=1 ... means RFC 2109++ style
    setVersion : function (v)
    {
        this._version = v;
    }, 
    
    getVersion : function ()
    {
        return this._version;
    }, 
    
    // ;Comment=VALUE ... describes cookie's use
    setComment : function (purpose)
    {
        this._comment = purpose;
    }, 
    
    getComment : function ()
    {
        return this._comment;
    }, 
    
    toString : function ()
    {
        var ret = this._name + "=" + this._value;
        
        if ("_maxAge" in this)
        {
            ret += "; max-age=" + this._maxAge;
        }
        else if ("_expires" in this)
        {
            var time = new Date();
            time.setTime(+time + this._expires * 1000);
            
            ret += "; expires=" + time.toGMTString();
        }
        
        if ("_path" in this)
        {
            ret += "; path=" + this._path;
        }
        
        if ("_domain" in this)
        {
            ret += "; domain=" + this._domain;
        }
        
        if ("_secure" in this && this._secure === true)
        {
            ret += "; secure";
        }
        
        if ("_version" in this)
        {
            ret += "; version=" + this._version;
        }
        
        if ("_comment" in this)
        {
            ret += "; comment=" + this._comment;
        }
        
        return ret;
    }
};