/**
 * @author     LiuZhaoHui <hi.liuzhaoxin@gmail.com>
 * @link       http://www.eatbean.com/nodejs
**/

"use strict";

var HttpRouter = Dew("use", "Server.Web.Router.HttpRouter");
var HttpCookie = Dew("use", "Server.Web.Response.HttpCookie");

var HttpResponse = 
{
    __name__ : "HttpResponse", 
    
    _isResponseWrite : false, 
    _isResponseEnd : false, 
    
    _buffer : "", 
    _isBuffer : false, 
    
    _typeList : 
    {
        json : "application/json", 
        xml : "text/xml"
    }, 
    
    /**
     * no-cache
     * 数据内容绝不被储存起来
     * 
     * private
     * 数据内容只能被储存到私有的 caches, 即 non-shared caches 中
     * 
     * public
     * 数据内容皆被储存起来，就连有密码保护的页面也一样，因此安全性相当低
    **/
    _allowedCacheControl : ["no-cache", "private", "public"], 
    
    initialize : function (application)
    {
        application.useSection("http");
        
        this._contentType = application.get("default_mimetype") + 
          "; charset=" + application.get("default_charset");
        this._exposeNodejs = application.get("expose_nodejs");
    }, 
    
    // 返回一个 HttpResponse 实例
    getInstance : function (response)
    {
        var self = Object.create(this);
        self._eventObject = {};
        self._responseContext = response;
        
        if (this._exposeNodejs)
        {
            response.setHeader("Server", Dew.server);
            response.setHeader("X-Powered-By", Dew.nodejs);
        }
        
        response.setHeader("Content-Type", this._contentType);
        
        self.on("header", this.headerHandle_.bind(self));
        return self;
    }, 
    
    // 返回 response 对象
    get responseContext ()
    {
        return this._responseContext;
    }, 
    
    // 绑定自定义事件
    on : function (type, callback)
    {
        if (!(type in this._eventObject))
        {
            this._eventObject[type] = [];
        }
        
        this._eventObject[type].push(callback);
    }, 
    
    // 触发自定义事件
    emit : function (type)
    {
        if (!(type in this._eventObject)) return;
        
        var	args = Array.prototype.slice.call(arguments, 1);
        var events = this._eventObject[type];
        var i = 0, len = events.length;
        
        for (; i < len; i++)
        {
            events[i].apply(this, args);
        }
    }, 
    
    /*
    // 将自定义日志信息添加到日志文件
    appendToLog : function ()
    {
    }, 
    */
    
    // 设置 ETag HTTP 标头
    set eTag (etag)
    {
        this._etag = etag;
        this._responseContext.setHeader("ETag", etag);
    }, 
    
    // 获取 ETag HTTP 标头
    get eTag ()
    {
        return this._etag;
    }, 
    
    // 设置 Last-Modified HTTP 标头
    set lastModified (minute)
    {
        this._lastModified = minute;
        var time = new Date();
        time.setTime(+time + minute * 60 * 1000);
        this._responseContext.setHeader("Last-Modified", time.toUTCString());
    }, 
    
    // 获取 Last-Modified HTTP 标头
    get lastModified ()
    {
        return this._lastModified;
    }, 
    
    // 设置 Cache-Control: max-age HTTP 标头
    set maxAge (second)
    {
        this._maxAge = second;
        
        var mark = "max-age=";
        var data = this._responseContext.getHeader("Cache-Control");
        
        if (undefined === data)
        {
            this._responseContext.setHeader("Cache-Control", mark + second);
        }
        else
        {
            var offset = data.indexOf(mark);
            
            if (~offset)
            {
                offset = offset + mark.length;
                var part = data.slice(0, offset) + second;
                offset = data.indexOf(",", offset);
                
                if (~offset)
                {
                    this._responseContext.setHeader("Cache-Control", part + data.slice(offset));
                }
                else
                {
                    this._responseContext.setHeader("Cache-Control", part);
                }
            }
            else
            {
                this._responseContext.setHeader("Cache-Control", data + ", " + mark + second);
            }
        }
    }, 
    
    // 获取 Cache-Control: max-age HTTP 标头
    get maxAge ()
    {
        return this._maxAge;
    }, 
    
    // 设置 Cache-Control HTTP 标头
    set cacheControl (method)
    {
        if (~this._allowedCacheControl.index(method))
        {
            this._cacheControl = method;
            
            var data = this._responseContext.getHeader("Cache-Control");
            
            if (undefined === data)
            {
                this._responseContext.setHeader("Cache-Control", method);
            }
            else
            {
                var mark = "max-age=";
                var offset = data.indexOf(mark);
                
                if (~offset)
                {
                    var index = offset;
                    offset = data.indexOf(",", index);
                    
                    if (~offset)
                    {
                        this._responseContext.setHeader("Cache-Control", data.slice(0, offset) + ", " + method);
                    }
                    else
                    {
                        this._responseContext.setHeader("Cache-Control", method + ", " + data.slice(index));
                    }
                }
                else
                {
                    this._responseContext.setHeader("Cache-Control", method);
                }
            }
        }
        else
        {
            throw new Error("argumentException");
        }
    }, 
    
    // 获取 Cache-Control HTTP 标头
    get cacheControl ()
    {
        return this._cacheControl;
    }, 
    
    // 设置输出流的 HTTP 字符集
    set charset (charset)
    {
        this._charset = charset;
        
        var data = this._responseContext.getHeader("Content-Type");
        
        if (undefined === data)
        {
            this._responseContext.setHeader("Content-Type", "; charset=" + charset);
        }
        else
        {
            var offset = data.lastIndexOf(";");
            
            if (~offset)
            {
                offset = data.indexOf("=", offset);
                this._responseContext.setHeader("Content-Type", data.slice(0, offset + 1) + charset);
            }
            else if (data)
            {
                this._responseContext.setHeader("Content-Type", data + "; charset=" + charset);
            }
            else
            {
                this._responseContext.setHeader("Content-Type", "charset=" + charset);
            }
        }
    }, 
    
    // 获取输出流的 HTTP 字符集
    get charset ()
    {
        return this._charset;
    }, 
    
    // 设置输出流的 HTTP MIME 类型
    set contentType (type)
    {
        this._contentType = type;
        
        var data = this._responseContext.getHeader("Content-Type");
        
        if (undefined === data)
        {
             this._responseContext.setHeader("Content-Type", type);
        }
        else
        {
            var offset = data.lastIndexOf(";");
            
            if (~offset)
            {
                this._responseContext.setHeader("Content-Type", type + data.slice(offset));
            }
            else
            {
                this._responseContext.setHeader("Content-Type", type);
            }
        }
    }, 
    
    // 获取输出流的 HTTP MIME 类型
    get contentType ()
    {
        return this._contentType;
    }, 
    
    // 通过文件后缀名设置 HTTP MIME 类型
    set type (name)
    {
        if (name in this._typeList)
        {
            this._type = name;
            this.contentType = this._typeList[name];
        }
    }, 
    
    // 获取通过文件后缀设置的 HTTP MIME 值
    get type ()
    {
        return this._type;
    }, 
    
    // 设置缓存页多少分钟过期
    set expires (expires)
    {
        this._expires = expires;
        var	time = new Date();
        time.setTime(+time + expires * 1000 * 60);
        this._responseContext.setHeader("Expires", time.toGMTString());
    }, 
    
    // 获取缓存页多少分钟过期
    get expires ()
    {
        return this._expires;
    }, 
    
    // 设置 HTTP 状态代码
    set statusCode (code)
    {
        this._responseContext.statusCode = code;
    }, 
    
    // 获取 HTTP 状态代码
    get statusCode ()
    {
        return this._responseContext.statusCode;
    }, 
    
    /*
    // 设置 HTTP 状态字符串
    set statusDescription (description)
    {
    }, 
    // 获取 HTTP 状态字符串
    get statusDescription ()
    {
    }, 
    */
    
    /**
     * 设置 Http Location 标头
     * 
     * response.statusCode = 301;
     * response.redirectLocation = "http://www.eatbean.com";
     * response.end();
    **/
    set redirectLocation (location)
    {
        this._redirectLocation = location;
        this._responseContext.setHeader("Location", location);
    }, 
    
    // 获取 Http Location 标头
    get redirectLocation ()
    {
        return this._redirectLocation;
    }, 
    
    // 使用路由参数值将请求重定向到新 URL 地址
    // redirect("/user/login")
    // redirect("/user/:name", {name : "lzx"})
    // redirect({module : "Default", controller : "user", action : "login"}, {name : "lzx", age : 23})
    redirectToRoute : function (url, data)
    {
        this.redirectLocation = HttpRouter.assemble(url, data);
    }, 
    
    // 设置响应标头
    setHeader : function (name, value)
    {
        this._responseContext.setHeader(name, value);
    }, 
    
    // 获取响应标头
    getHeader : function (name)
    {
        return this._responseContext.getHeader(name);
    }, 
    
    // 移除响应标头
    removeHeader : function (name)
    {
        this._responseContext.removeHeader(name);
    }, 
    
    // 将一个 HTTP Cookie 添加 cookie 集合
    addCookie : function (cookie)
    {
        if (!(cookie instanceof HttpCookie))
        {
            throw new Error("Not cookie instantiated");
        }
        
        if (!("_cookies" in this))
        {
            this._cookies = {};
        }
        
        this._cookies[cookie.getName()] = cookie;
        
        return cookie;
    }, 
    
    // 设置一个 cookie 值
    setCookie : function (name, value, second, path, domain, secure, comment, version)
    {
        return this.addCookie(new HttpCookie(name, value, second, path, domain, secure, comment, version));
    }, 
    
    // 获得一个 cookie 对象
    getCookie : function (name)
    {
        if ("_cookies" in this && name in this._cookies)
        {
            return this._cookies[name];
        }
        
        return null;
    }, 
    
    // 移除一个 cookie 对象
    removeCookie : function (name)
    {
        if ("_cookies" in this && name in this._cookies)
        {
            delete this._cookies[name];
        }
    }, 
    
    // 是否开启缓冲
    set isBuffer (bool)
    {
        if (bool && this._isBuffer)
        {
            throw new Error("Buffer is already open");
        }
        
        this._isBuffer = bool;
    }, 
    
    // 当前是否开启缓冲
    get isBuffer ()
    {
        return this._isBuffer;
    }, 
    
    // 发送当前所有缓冲的输出
    flush : function ()
    {
        if (this._isBuffer)
        {
            this._responseContext.write(this._buffer);
            this._buffer = "";
        }
    }, 
    
    // 清除缓冲所有内容输出
    clear : function ()
    {
        if (this._isBuffer)
        {
            this._buffer = "";
        }
    }, 
    
    // 返回缓冲内容
    read : function ()
    {
        if (this._isBuffer)
        {
            return this._buffer;
        }
    }, 
    
    // 把数据写入 HTTP 响应输出流
    write : function (data, encoding)
    {
        if (this._isBuffer)
        {
            this._buffer += data;
        }
        else
        {
            if (!this._isResponseWrite)
            {
                this._isResponseWrite = true;
                this.emit("header");
            }
            
            this._responseContext.write(data, encoding);
        }
    }, 
    
    // 将当前所有缓冲的输出发送到客户端
    end : function (data, encoding)
    {
        if (!this._isResponseWrite)
        {
            this._isResponseWrite = true;
            this.emit("header");
        }
        
        if (this._isBuffer)
        {
            if (undefined === data)
            {
                this._responseContext.end(this._buffer);
            }
            else
            {
                this._responseContext.end(this._buffer + data, encoding);
            }
        }
        else
        {
            this._responseContext.end(data, encoding);
        }
        
        if (!this._isResponseEnd)
        {
            this._isResponseEnd = true;
            this.emit("finish");
        }
    }, 
    
    headerHandle_ : function ()
    {
        if ("_cookies" in this)
        {
            var key, data = [];
            
            for (key in this._cookies)
            {
                data.push(this._cookies[key].toString());
            }
            
            if (undefined !== key)
            {
                this._responseContext.setHeader("Set-Cookie", data);
            }
        }
    }
};

module.exports = HttpResponse;