/**
 * @author     LiuZhaoHui <hi.liuzhaoxin@gmail.com>
 * @link       http://www.eatbean.com/nodejs
**/

"use strict";

var Attr = 
{
    __name__ : "Attr", 
    
    A : 
    {
        LF : 0x0A,			// 换行
        CR : 0x0D,			// 回车
        
        LT : 0x3C,			// 小于
        GT : 0x3E,			// 大于
        
        SPACE : 0x20,		// 空格
        TAB : 0x09,			// 制表符
        
        EQUAL : 0x3D,		// 等于
        
        SQUOTE : 0x22,	// 双引号
        DQUOTE : 0x27,	// 单引号
        
        BACKSLASH : 0x5C,			/* 反斜线 \ */
        FORWARDSLASH : 0x2F,	// 正斜线 /
        
        LPARENTHESIS : 0x28,  // (
        RPARENTHESIS : 0x29   // )
    }, 
    
    S : 
    {
				KEY_START : 0, 
				KEY : 1, 
				VAL_START : 2, 
				VAL : 3
    }, 
    
    handle : function (text, rule)
    {
        var i = 0, len = text.length;
        var S = this.S, A = this.A;
        var index = 0, flags = 0;
        var state = S.KEY_START;
        var start, key, ch;
        var ret = {};
        
        for (; i < len; i++)
        {
            ch = text.charCodeAt(i);
            
            switch (state)
            {
                case S.KEY_START : 
                  if (ch === A.SPACE || ch === A.TAB)
                  {
                      break;
                  }
                  
                  start = i;
                  state = S.KEY;
                  
                case S.KEY: 
                  if (!(ch === A.SPACE || ch === A.TAB || ch === A.EQUAL))
                  {
                      break;
                  }
                  
                  key = text.slice(start, i);
                  state = S.VAL_START;
                  
                case S.VAL_START : 
                  if (ch === A.SPACE || ch === A.TAB)
                  {
                      break;
                  }
                  
                  if (ch === A.EQUAL)
                  {
                      state = S.VAL;
                  }
                  else
                  {
                      throw new Error('Please check [' + rule.file + '] on line ' + (rule.line + 1));
                  }
                  break;
                  
                case S.VAL : 
                  if (flags === 0)
                  {
                      if (index === 0)
                      {
                          if (ch === A.SPACE || ch === A.TAB)
                          {
                              break;
                          }
                          else if (ch === A.SQUOTE || ch === A.DQUOTE)
                          {
                              flags = ch;
                          }
                          else
                          {
                              index++;
                          }
                          
                          start = i;
                      }
                      else if (index === 1)
                      {
                          if (ch === A.LPARENTHESIS)
                          {
                              flags = A.RPARENTHESIS;
                          }
                          else if (ch === A.SPACE || ch === A.TAB)
                          {
                              index = 0;
                              ret[key] = text.slice(start, i);
                              state = S.KEY_START;
                          }
                      }
                  }
                  else if (ch === A.BACKSLASH)
                  {
                      index = flags;
                      flags |= ~flags;
                  }
                  else if (ch === flags)
                  {
                      index = 0;
                      flags = 0;
                      ret[key] = text.slice(start, i + 1);
                      state = S.KEY_START;
                  }
                  else if (flags === -1)
                  {
                      flags = index;
                  }
                  break;
            }
        }
        
        if (state === S.VAL)
        {
            ret[key] = text.slice(start);
        }
        else if (state !== S.KEY_START)
        {
            throw new Error("Please check [" + rule.file + "] on line " + (rule.line + 1));
        }
        
        return ret;
    }
};

module.exports = Attr;