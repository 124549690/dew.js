/**
 * @author     LiuZhaoHui <hi.liuzhaoxin@gmail.com>
 * @link       http://www.eatbean.com/nodejs
**/

"use strict";

var Strip = 
{
    __name__ : "Strip", 
    
    _isTpl : false, 
    
    A : 
    {
        NUL : 0x00,     // Null char.
        LF : 0x0A,			// 换行 \n
        CR : 0x0D,			// 回车 \r
        
        LT : 0x3C,			// 小于 <
        GT : 0x3E,			// 大于 >
        
        SPACE : 0x20,		// 空格
        TAB : 0x09,			// 制表符 \t
        
        EQUAL : 0x3D,		// 等于 =
        AT : 0x40,			// @
        SHARP : 0x23,		// #
        
        LBRACKET : 0x5B, // [
        RBRACKET : 0x5D, // ]
        
        SQUOTE : 0x22,	// 双引号 "
        DQUOTE : 0x27,	// 单引号 ,
        
        LPARENTHESIS : 0x28,  // (
        RPARENTHESIS : 0x29,  // )
        
        BACKSLASH : 0x5C,			/* 反斜线 \ */
        FORWARDSLASH : 0x2F,	// 正斜线 /
        
        COMMA : 0x2C,		// 逗号 ,
        SEMI : 0x3B,		// 分号 ;
        
        DOT : 0x2E,			// 点 .
        
        UNDER : 0x5F,		// 下划线 _
        
        a : 0x61, 			// a
        A : 0x41,       // A
        
        z : 0x7A,				// z
        Z : 0x5A,       // Z
        
        x : 0x78,				// x
        X : 0x41,       // X
        
        f : 0x66,				// f
        F : 0x46,       // F
        
        e : 0x65,       // e
        E : 0x45,       // E
        
        MINUS : 0x2D,   // -
        PLUS : 0x2B,    // +
        
        0 : 0x30,			  // 0
        7 : 0x37,       // 7
        9 : 0x39		  	// 9
    }, 
    
    T : 
    {
        HTML : 0, 
        TPL : 1
    }, 
    
    initialize : function (application)
    {
        application.useSection("view");
        
        this._tagsStart = new Buffer(application.get("tags_start", "{tpl:"));
        this._tagsStartLength = this._tagsStart.length;
        this._tagsEnd = new Buffer(application.get("tags_end", "}"));
        this._tagsEndLength = this._tagsEnd.length;
    }, 
    
    // 返回一个 demo 实例
    getInstance : function (text, file)
    {
        var self = Object.create(this);
        self._state = 
        {
            text : text, 
            file : file, 
            pos : 0, 
            tokpos : 0, 
            line : 0, 
            tokline : 0, 
            col : 0, 
            tokcol : 0
        };
        
        return self;
    }, 
    
    isNewline_ : function (ch)
    {
        return ch === this.A.CR || ch === this.A.LF;
    }, 
    
    // 查看当前字符
    peek_ : function ()
    {
        var code = this._state.text.charCodeAt(this._state.pos);
        return isNaN(code) ? this.A.NUL : code;
    }, 
    
    // 下一个字符
    next_ : function ()
    {
        var ch = this.peek_();
        this._state.pos++;
        this._state.col++;
        return ch;
    }, 
    
    // 忽略换行
    skipNewline_ : function ()
    {
        var A = this.A, ch;
        var state = this._state, before = false;
        
        do
        {
            ch = this.peek_();
            state.col = 0;
            
            if (ch === A.CR)
            {
                if (!before)
                {
                    before = true;
                }
                
                state.line++;
            }
            else if (ch === A.LF)
            {
                if (before)
                {
                    before = false;
                }
                else
                {
                    state.line++;
                }
            }
            else
            {
                return ch;
            }
            
            this.next_();
        } while(true);
    }, 
    
    // 忽略空白符
    skipWhitespace_ : function ()
    {
        var A = this.A, ch;
        
        do
        {
            ch = this.peek_();
            
            if (this.isNewline_(ch))
            {
                ch = this.skipNewline_();
            }
            
            if (!(ch === A.SPACE || ch === A.TAB))
            {
                break;
            }
            
            this.next_();
        } while (true);
    }, 
    
    eof_ : function ()
    {
        return this.peek_() === this.A.NUL;
    }, 
    
    // 查找 " 或 '
    find_ : function (what)
    {
        return this._state.text.indexOf(what, this._state.pos);
    }, 
    
    startToken_ : function ()
    {
        var state = this._state;
        state.tokline = state.line;
        state.tokcol = state.col;
        state.tokpos = state.pos;
    }, 
    
    token_ : function (type, value)
    {
        var state = this._state;
        
        var ret = 
        {
            type : type, 
            file : state.file, 
            value : value, 
            line : state.tokline, 
            col : state.tokcol, 
            pos : state.tokpos
        };
        
        return ret;
    }, 
    
    nextToken : function ()
    {
        if (this.eof_())
        {
            return null;
        }
        
        this.startToken_();
        
        var T = this.T;
        var pos, state = this._state;
        
        if (!this._isTpl)
        {
            pos = this.matchTagsStart_();
            
            if (~pos)
            {
                this._isTpl = true;
                
                if (state.tokpos !== pos)
                {
                    return this.token_(T.HTML, state.text.slice(state.tokpos, pos));
                }
                
                this.startToken_();
            }
            else
            {
                return this.token_(T.HTML, state.text.slice(state.tokpos));
            }
        }
        
        pos = this.matchTagsEnd_();
        
        if (~pos)
        {
            this._isTpl = false;
            return this.token_(T.TPL, state.text.slice(state.tokpos, pos).trim());
        }
        else
        {
            throw new Error("Please check [" + state.file + "] on line " + (state.line + 1));
        }
    }, 
    
    matchTagsStart_ : function ()
    {
        var index = 0, ch;
        
        do
        {
            ch = this.peek_();
            
            if (this.isNewline_(ch))
            {
                ch = this.skipNewline_();
            }
            
            if (ch === this._tagsStart[index])
            {
                while (index < this._tagsStartLength)
                {
                    if (this.peek_() !== this._tagsStart[index++])
                    {
                        index = 0;
                        break;
                    }
                    
                    this.next_();
                    
                    if (index === this._tagsStartLength)
                    {
                        return this._state.pos - index;
                    }
                }
            }
            else if (this.eof_())
            {
                return -1;
            }
            else
            {
                this.next_();
            }
        } while (true);
    }, 
    
    matchTagsEnd_ : function ()
    {
        var index = 0, flags = 0;
        var ch, A = this.A;
        
        do
        {
            ch = this.peek_();
            
            if (this.isNewline_(ch))
            {
                ch = this.skipNewline_();
            }
            else if (this.eof_())
            {
                return -1;
            }
            
            if (flags === 0)
            {
                if (index < this._tagsEndLength && ch === this._tagsEnd[index])
                {
                    index++;
                }
                else
                {
                    index = 0;
                }
                
                if (index === this._tagsEndLength)
                {
                    this.next_();
                    return this._state.pos - index;
                }
                else if (ch === A.SQUOTE || ch === A.DQUOTE)
                {
                    flags = ch;
                }
                else if (ch === A.LPARENTHESIS)
                {
                    flags = A.RPARENTHESIS;
                }
            }
            else if (ch === A.BACKSLASH)
            {
                index = flags;
                flags |= ~flags;
            }
            else if (ch === flags)
            {
                index = 0;
                flags = 0;
            }
            else if (flags === -1)
            {
                flags = index;
            }
            
            this.next_();
        } while (true);
    }
};

module.exports = Strip;