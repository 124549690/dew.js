/**
 * @author     LiuZhaoHui <hi.liuzhaoxin@gmail.com>
 * @link       http://www.eatbean.com/nodejs
**/

"use strict";

var Compiler = Dew("use", "Server.Web.View.Engine.Compiler");

var Pager = Dew("use", "Tool.Pager");
var HttpRouter = Dew("use", "Server.Web.Router.HttpRouter");

var Template = 
{
    __name__ : "Template", 
    
    _superTplVars : 
    {
        _LINK_ : HttpRouter, 
        _PAGE_ : Pager, 
    }, 
    
    initialize : function (application)
    {
        Compiler.initialize(application);
        application.useSection("view");
        
        this._maxlifetime = application.get("maxlifetime", 900) * 1000;
    }, 
    
    // 返回一个 Template 实例
    getInstance : function (directory, moduleName, viewCache, langCache, confCache)
    {
        var self = Object.create(this);
        self._directory = directory;
        self._moduleName = moduleName;
        self._viewCache = viewCache;
        self._langCache = langCache;
        self._confCache = confCache;
        self.clearAssign();
        
        return self;
    }, 
    
    assign : function (key, val)
    {
        if (undefined === key)
        {
            return this._tplVars;
        }
        else if ("string" === typeof key)
        {
            this._tplVars[key] = val;
        }
        else if ("object" === typeof key)
        {
            val = key;
            for (key in val)
            {
                this._tplVars[key] = val[key];
            }
        }
        
        return this;
    }, 
    
    clearAssign : function (key)
    {
        if ("string" === typeof key)
        {
            delete this._tplVars[key];
        }
        else
        {
            this._tplVars = 
            {
                __proto__ : this._superTplVars, 
                _LANG_ : this._langCache, 
                _CONF_ : this._confCache
            };
        }
        
        return this;
    }, 
    
    fetch : function (fileName)
    {
        var now = +new Date();
        var name = this._moduleName + fileName;
        var	view = this._viewCache[name];
        
        if (undefined === view || view._time < now - this._maxlifetime)
        {
            view = new Function(Compiler.getInstance(this._directory, fileName).returnJS());
            view._time = now;
            
            this._viewCache[name] = view;
        }
        
        return view.call(this._tplVars);
    }, 
    
    clearCache : function (fileName)
    {
        if ("string" == typeof fileName)
        {
            delete this._viewCache[fileName];
        }
        else
        {
            for (var name in this._viewCache)
            {
                delete this._viewCache[name];
            }
        }
        
        return this;
    }
};

module.exports = Template;