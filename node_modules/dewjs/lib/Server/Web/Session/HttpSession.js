/**
 * @author     LiuZhaoHui <hi.liuzhaoxin@gmail.com>
 * @link       http://www.eatbean.com/nodejs
**/

"use strict";

var Uuid = Dew("use", "Tool.Uuid");
var HttpCookie = Dew("use", "Server.Web.Response.HttpCookie");

var HttpSession = 
{
    __name__ : "HttpSession", 
    
    _allowCommit : true, 
    
    initialize : function (application)
    {
        application.useSection("session");
        
        this._saveHandler = Dew("use", "Server.Web.Session." + application.get('save_handler'));
        this._saveHandler.initialize(application);
        this._cookieName = application.get("cookie_name");
        this._maxlifetime = application.get("maxlifetime");
    }, 
    
    // 返回一个 HttpSession 实例
    getInstance : function (async, context, request, response)
    {
        var self = Object.create(this);
        self._sid = request.cookies[this._cookieName] || Uuid();
        
        self._handler = this._saveHandler.getInstance(async, self._sid);
        self._cookie = response.addCookie(new HttpCookie(this._cookieName, self._sid, this._maxlifetime, "/"));
        
        response.on("finish", this.commit.bind(self));
        context._session = self;
        
        return self;
    }, 
    
    has : function (key)
    {
        return key in this._handler.data;
    }, 
    
    set : function (key, value)
    {
        this._handler.data[key] = value;
    }, 
    
    get : function (key, def)
    {
        var data = this._handler.data;
        
        if (undefined === key)
        {
            return data;
        }
        
        return key in data ? data[key] : def;
    }, 
    
    remove : function (key)
    {
        var data = this._handler.data;
        
        if (key in data)
        {
            delete data[key];
        }
    }, 
    
    removeAll : function ()
    {
        this._handler.data = {};
    }, 
    
    set id (id)
    {
        this._sid = id;
        this._cookie.setValue(id);
    }, 
    
    get id ()
    {
        return this._sid;
    }, 
    
    set name (name)
    {
        this._cookieName = name;
        this._cookie.setName(name);
    }, 
    
    get name ()
    {
        return this._cookieName;
    }, 
    
    set timeout (timeout)
    {
        this._maxlifetime = timeout;
        this._cookie.setExpires(timeout);
    }, 
    
    get timeout ()
    {
        return this._maxlifetime;
    }, 
    
    serialize : function ()
    {
        return JSON.stringify(this._handler.data);
    }, 
    
    unserialize : function (data)
    {
        this._handler.data = JSON.parse(data);
    }, 
    
    commit : function (callback)
    {
        this._allowCommit && this._handler.commit(callback);
    }, 
    
    destroy : function (callback)
    {
        this._cookie.setExpires(-1);
        this._cookie = null;
        this._allowCommit = false;
        this._handler.destroy(callback);
    }
};

module.exports = HttpSession;